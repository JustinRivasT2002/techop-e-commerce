/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmailData } from '../ee-api-models';
// @ts-ignore
import { EmailMessageData } from '../ee-api-models';
// @ts-ignore
import { EmailSend } from '../ee-api-models';
// @ts-ignore
import { EmailTransactionalMessageData } from '../ee-api-models';
// @ts-ignore
import { MergeEmailPayload } from '../ee-api-models';
/**
 * EmailsApi - axios parameter creator
 * @export
 */
export const EmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns email details for viewing or rendering. Required Access Level: None
         * @summary View Email
         * @param {string} msgid Message identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsByMsgidViewGet: async (msgid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'msgid' is not null or undefined
            assertParamExists('emailsByMsgidViewGet', 'msgid', msgid)
            const localVarPath = `/emails/{msgid}/view`
                .replace(`{${"msgid"}}`, encodeURIComponent(String(msgid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails CSV
         * @param {MergeEmailPayload} mergeEmailPayload Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsMergefilePost: async (mergeEmailPayload: MergeEmailPayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mergeEmailPayload' is not null or undefined
            assertParamExists('emailsMergefilePost', 'mergeEmailPayload', mergeEmailPayload)
            const localVarPath = `/emails/mergefile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mergeEmailPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails
         * @param {EmailMessageData} emailMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsPost: async (emailMessageData: EmailMessageData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailMessageData' is not null or undefined
            assertParamExists('emailsPost', 'emailMessageData', emailMessageData)
            const localVarPath = `/emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailMessageData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
         * @summary Send Transactional Email
         * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsTransactionalPost: async (emailTransactionalMessageData: EmailTransactionalMessageData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailTransactionalMessageData' is not null or undefined
            assertParamExists('emailsTransactionalPost', 'emailTransactionalMessageData', emailTransactionalMessageData)
            const localVarPath = `/emails/transactional`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailTransactionalMessageData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailsApi - functional programming interface
 * @export
 */
export const EmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns email details for viewing or rendering. Required Access Level: None
         * @summary View Email
         * @param {string} msgid Message identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailsByMsgidViewGet(msgid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailsByMsgidViewGet(msgid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails CSV
         * @param {MergeEmailPayload} mergeEmailPayload Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailsMergefilePost(mergeEmailPayload: MergeEmailPayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSend>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailsMergefilePost(mergeEmailPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails
         * @param {EmailMessageData} emailMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailsPost(emailMessageData: EmailMessageData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSend>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailsPost(emailMessageData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
         * @summary Send Transactional Email
         * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailsTransactionalPost(emailTransactionalMessageData: EmailTransactionalMessageData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSend>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailsTransactionalPost(emailTransactionalMessageData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailsApi - factory interface
 * @export
 */
export const EmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailsApiFp(configuration)
    return {
        /**
         * Returns email details for viewing or rendering. Required Access Level: None
         * @summary View Email
         * @param {string} msgid Message identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsByMsgidViewGet(msgid: string, options?: any): AxiosPromise<EmailData> {
            return localVarFp.emailsByMsgidViewGet(msgid, options).then((request) => request(axios, basePath));
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails CSV
         * @param {MergeEmailPayload} mergeEmailPayload Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsMergefilePost(mergeEmailPayload: MergeEmailPayload, options?: any): AxiosPromise<EmailSend> {
            return localVarFp.emailsMergefilePost(mergeEmailPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails
         * @param {EmailMessageData} emailMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsPost(emailMessageData: EmailMessageData, options?: any): AxiosPromise<EmailSend> {
            return localVarFp.emailsPost(emailMessageData, options).then((request) => request(axios, basePath));
        },
        /**
         * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
         * @summary Send Transactional Email
         * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsTransactionalPost(emailTransactionalMessageData: EmailTransactionalMessageData, options?: any): AxiosPromise<EmailSend> {
            return localVarFp.emailsTransactionalPost(emailTransactionalMessageData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailsApi - interface
 * @export
 * @interface EmailsApi
 */
export interface EmailsApiInterface {
    /**
     * Returns email details for viewing or rendering. Required Access Level: None
     * @summary View Email
     * @param {string} msgid Message identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiInterface
     */
    emailsByMsgidViewGet(msgid: string, options?: AxiosRequestConfig): AxiosPromise<EmailData>;

    /**
     * Send bulk merge email. Required Access Level: SendHttp
     * @summary Send Bulk Emails CSV
     * @param {MergeEmailPayload} mergeEmailPayload Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiInterface
     */
    emailsMergefilePost(mergeEmailPayload: MergeEmailPayload, options?: AxiosRequestConfig): AxiosPromise<EmailSend>;

    /**
     * Send bulk merge email. Required Access Level: SendHttp
     * @summary Send Bulk Emails
     * @param {EmailMessageData} emailMessageData Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiInterface
     */
    emailsPost(emailMessageData: EmailMessageData, options?: AxiosRequestConfig): AxiosPromise<EmailSend>;

    /**
     * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
     * @summary Send Transactional Email
     * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApiInterface
     */
    emailsTransactionalPost(emailTransactionalMessageData: EmailTransactionalMessageData, options?: AxiosRequestConfig): AxiosPromise<EmailSend>;

}

/**
 * EmailsApi - object-oriented interface
 * @export
 * @class EmailsApi
 * @extends {BaseAPI}
 */
export class EmailsApi extends BaseAPI implements EmailsApiInterface {
    /**
     * Returns email details for viewing or rendering. Required Access Level: None
     * @summary View Email
     * @param {string} msgid Message identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public emailsByMsgidViewGet(msgid: string, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).emailsByMsgidViewGet(msgid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send bulk merge email. Required Access Level: SendHttp
     * @summary Send Bulk Emails CSV
     * @param {MergeEmailPayload} mergeEmailPayload Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public emailsMergefilePost(mergeEmailPayload: MergeEmailPayload, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).emailsMergefilePost(mergeEmailPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send bulk merge email. Required Access Level: SendHttp
     * @summary Send Bulk Emails
     * @param {EmailMessageData} emailMessageData Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public emailsPost(emailMessageData: EmailMessageData, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).emailsPost(emailMessageData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
     * @summary Send Transactional Email
     * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public emailsTransactionalPost(emailTransactionalMessageData: EmailTransactionalMessageData, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).emailsTransactionalPost(emailTransactionalMessageData, options).then((request) => request(this.axios, this.basePath));
    }
}
