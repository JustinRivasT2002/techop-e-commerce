/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Suppression } from '../ee-api-models';
/**
 * SuppressionsApi - axios parameter creator
 * @export
 */
export const SuppressionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Bounce List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesGet: async (search?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/suppressions/bounces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces Async
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesImportPost: async (file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/suppressions/bounces/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces
         * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesPost: async (requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('suppressionsBouncesPost', 'requestBody', requestBody)
            const localVarPath = `/suppressions/bounces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Delete Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsByEmailDelete: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('suppressionsByEmailDelete', 'email', email)
            const localVarPath = `/suppressions/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsByEmailGet: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('suppressionsByEmailGet', 'email', email)
            const localVarPath = `/suppressions/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Complaints List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsGet: async (search?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/suppressions/complaints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints Async
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsImportPost: async (file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/suppressions/complaints/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints
         * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsPost: async (requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('suppressionsComplaintsPost', 'requestBody', requestBody)
            const localVarPath = `/suppressions/complaints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppressions
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsGet: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/suppressions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Unsubscribes List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesGet: async (search?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/suppressions/unsubscribes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes Async
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesImportPost: async (file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/suppressions/unsubscribes/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes
         * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesPost: async (requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('suppressionsUnsubscribesPost', 'requestBody', requestBody)
            const localVarPath = `/suppressions/unsubscribes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SuppressionsApi - functional programming interface
 * @export
 */
export const SuppressionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SuppressionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Bounce List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsBouncesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsBouncesGet(search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces Async
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsBouncesImportPost(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsBouncesImportPost(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces
         * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsBouncesPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsBouncesPost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Delete Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsByEmailDelete(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsByEmailDelete(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsByEmailGet(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Suppression>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsByEmailGet(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Complaints List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsComplaintsGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsComplaintsGet(search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints Async
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsComplaintsImportPost(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsComplaintsImportPost(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints
         * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsComplaintsPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsComplaintsPost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppressions
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsGet(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Unsubscribes List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsUnsubscribesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsUnsubscribesGet(search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes Async
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsUnsubscribesImportPost(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsUnsubscribesImportPost(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes
         * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suppressionsUnsubscribesPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suppressionsUnsubscribesPost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SuppressionsApi - factory interface
 * @export
 */
export const SuppressionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SuppressionsApiFp(configuration)
    return {
        /**
         * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Bounce List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesGet(search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<Array<Suppression>> {
            return localVarFp.suppressionsBouncesGet(search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces Async
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesImportPost(file?: File, options?: any): AxiosPromise<void> {
            return localVarFp.suppressionsBouncesImportPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces
         * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesPost(requestBody: Array<string>, options?: any): AxiosPromise<Array<Suppression>> {
            return localVarFp.suppressionsBouncesPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Delete Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsByEmailDelete(email: string, options?: any): AxiosPromise<void> {
            return localVarFp.suppressionsByEmailDelete(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsByEmailGet(email: string, options?: any): AxiosPromise<Suppression> {
            return localVarFp.suppressionsByEmailGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Complaints List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsGet(search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<Array<Suppression>> {
            return localVarFp.suppressionsComplaintsGet(search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints Async
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsImportPost(file?: File, options?: any): AxiosPromise<void> {
            return localVarFp.suppressionsComplaintsImportPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints
         * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsPost(requestBody: Array<string>, options?: any): AxiosPromise<Array<Suppression>> {
            return localVarFp.suppressionsComplaintsPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppressions
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsGet(limit?: number, offset?: number, options?: any): AxiosPromise<Array<Suppression>> {
            return localVarFp.suppressionsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Unsubscribes List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesGet(search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<Array<Suppression>> {
            return localVarFp.suppressionsUnsubscribesGet(search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes Async
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesImportPost(file?: File, options?: any): AxiosPromise<void> {
            return localVarFp.suppressionsUnsubscribesImportPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes
         * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesPost(requestBody: Array<string>, options?: any): AxiosPromise<Array<Suppression>> {
            return localVarFp.suppressionsUnsubscribesPost(requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SuppressionsApi - interface
 * @export
 * @interface SuppressionsApi
 */
export interface SuppressionsApiInterface {
    /**
     * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Bounce List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsBouncesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;

    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces Async
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsBouncesImportPost(file?: File, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces
     * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsBouncesPost(requestBody: Array<string>, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;

    /**
     * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Delete Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsByEmailDelete(email: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsByEmailGet(email: string, options?: AxiosRequestConfig): AxiosPromise<Suppression>;

    /**
     * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Complaints List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsComplaintsGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;

    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints Async
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsComplaintsImportPost(file?: File, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints
     * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsComplaintsPost(requestBody: Array<string>, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;

    /**
     * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppressions
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;

    /**
     * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Unsubscribes List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsUnsubscribesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;

    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes Async
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsUnsubscribesImportPost(file?: File, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes
     * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsUnsubscribesPost(requestBody: Array<string>, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;

}

/**
 * SuppressionsApi - object-oriented interface
 * @export
 * @class SuppressionsApi
 * @extends {BaseAPI}
 */
export class SuppressionsApi extends BaseAPI implements SuppressionsApiInterface {
    /**
     * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Bounce List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsBouncesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsBouncesGet(search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces Async
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsBouncesImportPost(file?: File, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsBouncesImportPost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces
     * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsBouncesPost(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsBouncesPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Delete Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsByEmailDelete(email: string, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsByEmailDelete(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsByEmailGet(email: string, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsByEmailGet(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Complaints List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsComplaintsGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsComplaintsGet(search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints Async
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsComplaintsImportPost(file?: File, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsComplaintsImportPost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints
     * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsComplaintsPost(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsComplaintsPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppressions
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsGet(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Unsubscribes List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsUnsubscribesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsUnsubscribesGet(search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes Async
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsUnsubscribesImportPost(file?: File, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsUnsubscribesImportPost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes
     * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    public suppressionsUnsubscribesPost(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return SuppressionsApiFp(this.configuration).suppressionsUnsubscribesPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}
