/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ChannelLogStatusSummary } from '../ee-api-models';
import { LogStatusSummary } from '../ee-api-models';
/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export declare const StatisticsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieve stats of an existing campaign. Required Access Level: ViewChannels
     * @summary Load Campaign Stats
     * @param {string} name The name of the campaign to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsCampaignsByNameGet: (name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of your Campaigns\' stats. Required Access Level: ViewChannels
     * @summary Load Campaigns Stats
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsCampaignsGet: (limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve an existing channel stats. Required Access Level: ViewChannels
     * @summary Load Channel Stats
     * @param {string} name The name of the channel to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsChannelsByNameGet: (name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of your Channels\' stats. Required Access Level: ViewChannels
     * @summary Load Channels Stats
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsChannelsGet: (limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns basic statistics. Required Access Level: ViewReports
     * @summary Load Statistics
     * @param {string} from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsGet: (from: string, to?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StatisticsApi - functional programming interface
 * @export
 */
export declare const StatisticsApiFp: (configuration?: Configuration) => {
    /**
     * Retrieve stats of an existing campaign. Required Access Level: ViewChannels
     * @summary Load Campaign Stats
     * @param {string} name The name of the campaign to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsCampaignsByNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelLogStatusSummary>>;
    /**
     * Returns a list of your Campaigns\' stats. Required Access Level: ViewChannels
     * @summary Load Campaigns Stats
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsCampaignsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChannelLogStatusSummary>>>;
    /**
     * Retrieve an existing channel stats. Required Access Level: ViewChannels
     * @summary Load Channel Stats
     * @param {string} name The name of the channel to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsChannelsByNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelLogStatusSummary>>;
    /**
     * Returns a list of your Channels\' stats. Required Access Level: ViewChannels
     * @summary Load Channels Stats
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsChannelsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChannelLogStatusSummary>>>;
    /**
     * Returns basic statistics. Required Access Level: ViewReports
     * @summary Load Statistics
     * @param {string} from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsGet(from: string, to?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogStatusSummary>>;
};
/**
 * StatisticsApi - factory interface
 * @export
 */
export declare const StatisticsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve stats of an existing campaign. Required Access Level: ViewChannels
     * @summary Load Campaign Stats
     * @param {string} name The name of the campaign to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsCampaignsByNameGet(name: string, options?: any): AxiosPromise<ChannelLogStatusSummary>;
    /**
     * Returns a list of your Campaigns\' stats. Required Access Level: ViewChannels
     * @summary Load Campaigns Stats
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsCampaignsGet(limit?: number, offset?: number, options?: any): AxiosPromise<Array<ChannelLogStatusSummary>>;
    /**
     * Retrieve an existing channel stats. Required Access Level: ViewChannels
     * @summary Load Channel Stats
     * @param {string} name The name of the channel to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsChannelsByNameGet(name: string, options?: any): AxiosPromise<ChannelLogStatusSummary>;
    /**
     * Returns a list of your Channels\' stats. Required Access Level: ViewChannels
     * @summary Load Channels Stats
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsChannelsGet(limit?: number, offset?: number, options?: any): AxiosPromise<Array<ChannelLogStatusSummary>>;
    /**
     * Returns basic statistics. Required Access Level: ViewReports
     * @summary Load Statistics
     * @param {string} from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsGet(from: string, to?: string, options?: any): AxiosPromise<LogStatusSummary>;
};
/**
 * StatisticsApi - interface
 * @export
 * @interface StatisticsApi
 */
export interface StatisticsApiInterface {
    /**
     * Retrieve stats of an existing campaign. Required Access Level: ViewChannels
     * @summary Load Campaign Stats
     * @param {string} name The name of the campaign to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsCampaignsByNameGet(name: string, options?: AxiosRequestConfig): AxiosPromise<ChannelLogStatusSummary>;
    /**
     * Returns a list of your Campaigns\' stats. Required Access Level: ViewChannels
     * @summary Load Campaigns Stats
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsCampaignsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<ChannelLogStatusSummary>>;
    /**
     * Retrieve an existing channel stats. Required Access Level: ViewChannels
     * @summary Load Channel Stats
     * @param {string} name The name of the channel to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsChannelsByNameGet(name: string, options?: AxiosRequestConfig): AxiosPromise<ChannelLogStatusSummary>;
    /**
     * Returns a list of your Channels\' stats. Required Access Level: ViewChannels
     * @summary Load Channels Stats
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsChannelsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<ChannelLogStatusSummary>>;
    /**
     * Returns basic statistics. Required Access Level: ViewReports
     * @summary Load Statistics
     * @param {string} from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statisticsGet(from: string, to?: string, options?: AxiosRequestConfig): AxiosPromise<LogStatusSummary>;
}
/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export declare class StatisticsApi extends BaseAPI implements StatisticsApiInterface {
    /**
     * Retrieve stats of an existing campaign. Required Access Level: ViewChannels
     * @summary Load Campaign Stats
     * @param {string} name The name of the campaign to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    statisticsCampaignsByNameGet(name: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelLogStatusSummary>>;
    /**
     * Returns a list of your Campaigns\' stats. Required Access Level: ViewChannels
     * @summary Load Campaigns Stats
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    statisticsCampaignsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelLogStatusSummary[]>>;
    /**
     * Retrieve an existing channel stats. Required Access Level: ViewChannels
     * @summary Load Channel Stats
     * @param {string} name The name of the channel to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    statisticsChannelsByNameGet(name: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelLogStatusSummary>>;
    /**
     * Returns a list of your Channels\' stats. Required Access Level: ViewChannels
     * @summary Load Channels Stats
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    statisticsChannelsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelLogStatusSummary[]>>;
    /**
     * Returns basic statistics. Required Access Level: ViewReports
     * @summary Load Statistics
     * @param {string} from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    statisticsGet(from: string, to?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogStatusSummary>>;
}
