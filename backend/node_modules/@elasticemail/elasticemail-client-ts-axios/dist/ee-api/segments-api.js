"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SegmentsApi = exports.SegmentsApiFactory = exports.SegmentsApiFp = exports.SegmentsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SegmentsApi - axios parameter creator
 * @export
 */
exports.SegmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete an existing segment. Required Access Level: ModifyContacts
         * @summary Delete Segment
         * @param {string} name Name of your segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsByNameDelete: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('segmentsByNameDelete', 'name', name);
            const localVarPath = `/segments/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns details for the specified segment. Required Access Level: ViewContacts
         * @summary Load Segment
         * @param {string} name Name of the segment you want to load. Will load all contacts if the \&#39;All Contacts\&#39; name has been provided
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsByNameGet: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('segmentsByNameGet', 'name', name);
            const localVarPath = `/segments/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Rename or change RULE for your segment. Required Access Level: ModifyContacts
         * @summary Update Segment
         * @param {string} name Name of your segment.
         * @param {SegmentPayload} segmentPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsByNamePut: (name, segmentPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('segmentsByNamePut', 'name', name);
            // verify required parameter 'segmentPayload' is not null or undefined
            common_1.assertParamExists('segmentsByNamePut', 'segmentPayload', segmentPayload);
            const localVarPath = `/segments/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(segmentPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all your available Segments. Required Access Level: ViewContacts
         * @summary Load Segments
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsGet: (limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/segments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a new segment, based on specified RULE. Required Access Level: ModifyContacts
         * @summary Add Segment
         * @param {SegmentPayload} segmentPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsPost: (segmentPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'segmentPayload' is not null or undefined
            common_1.assertParamExists('segmentsPost', 'segmentPayload', segmentPayload);
            const localVarPath = `/segments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(segmentPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SegmentsApi - functional programming interface
 * @export
 */
exports.SegmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.SegmentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Delete an existing segment. Required Access Level: ModifyContacts
         * @summary Delete Segment
         * @param {string} name Name of your segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsByNameDelete(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.segmentsByNameDelete(name, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns details for the specified segment. Required Access Level: ViewContacts
         * @summary Load Segment
         * @param {string} name Name of the segment you want to load. Will load all contacts if the \&#39;All Contacts\&#39; name has been provided
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsByNameGet(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.segmentsByNameGet(name, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Rename or change RULE for your segment. Required Access Level: ModifyContacts
         * @summary Update Segment
         * @param {string} name Name of your segment.
         * @param {SegmentPayload} segmentPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsByNamePut(name, segmentPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.segmentsByNamePut(name, segmentPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all your available Segments. Required Access Level: ViewContacts
         * @summary Load Segments
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsGet(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.segmentsGet(limit, offset, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a new segment, based on specified RULE. Required Access Level: ModifyContacts
         * @summary Add Segment
         * @param {SegmentPayload} segmentPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsPost(segmentPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.segmentsPost(segmentPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SegmentsApi - factory interface
 * @export
 */
exports.SegmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.SegmentsApiFp(configuration);
    return {
        /**
         * Delete an existing segment. Required Access Level: ModifyContacts
         * @summary Delete Segment
         * @param {string} name Name of your segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsByNameDelete(name, options) {
            return localVarFp.segmentsByNameDelete(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns details for the specified segment. Required Access Level: ViewContacts
         * @summary Load Segment
         * @param {string} name Name of the segment you want to load. Will load all contacts if the \&#39;All Contacts\&#39; name has been provided
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsByNameGet(name, options) {
            return localVarFp.segmentsByNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Rename or change RULE for your segment. Required Access Level: ModifyContacts
         * @summary Update Segment
         * @param {string} name Name of your segment.
         * @param {SegmentPayload} segmentPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsByNamePut(name, segmentPayload, options) {
            return localVarFp.segmentsByNamePut(name, segmentPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all your available Segments. Required Access Level: ViewContacts
         * @summary Load Segments
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsGet(limit, offset, options) {
            return localVarFp.segmentsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new segment, based on specified RULE. Required Access Level: ModifyContacts
         * @summary Add Segment
         * @param {SegmentPayload} segmentPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsPost(segmentPayload, options) {
            return localVarFp.segmentsPost(segmentPayload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SegmentsApi - object-oriented interface
 * @export
 * @class SegmentsApi
 * @extends {BaseAPI}
 */
class SegmentsApi extends base_1.BaseAPI {
    /**
     * Delete an existing segment. Required Access Level: ModifyContacts
     * @summary Delete Segment
     * @param {string} name Name of your segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    segmentsByNameDelete(name, options) {
        return exports.SegmentsApiFp(this.configuration).segmentsByNameDelete(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns details for the specified segment. Required Access Level: ViewContacts
     * @summary Load Segment
     * @param {string} name Name of the segment you want to load. Will load all contacts if the \&#39;All Contacts\&#39; name has been provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    segmentsByNameGet(name, options) {
        return exports.SegmentsApiFp(this.configuration).segmentsByNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Rename or change RULE for your segment. Required Access Level: ModifyContacts
     * @summary Update Segment
     * @param {string} name Name of your segment.
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    segmentsByNamePut(name, segmentPayload, options) {
        return exports.SegmentsApiFp(this.configuration).segmentsByNamePut(name, segmentPayload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all your available Segments. Required Access Level: ViewContacts
     * @summary Load Segments
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    segmentsGet(limit, offset, options) {
        return exports.SegmentsApiFp(this.configuration).segmentsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a new segment, based on specified RULE. Required Access Level: ModifyContacts
     * @summary Add Segment
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    segmentsPost(segmentPayload, options) {
        return exports.SegmentsApiFp(this.configuration).segmentsPost(segmentPayload, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SegmentsApi = SegmentsApi;
