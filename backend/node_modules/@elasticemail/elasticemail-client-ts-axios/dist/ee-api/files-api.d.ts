/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { FileInfo } from '../ee-api-models';
import { FilePayload } from '../ee-api-models';
/**
 * FilesApi - axios parameter creator
 * @export
 */
export declare const FilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Permanently deletes the file from your Account. Required Access Level: ModifyFiles
     * @summary Delete File
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesByNameDelete: (name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets content of the specified File. Required Access Level: ViewFiles
     * @summary Download File
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesByNameGet: (name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the specified File\'s details. Required Access Level: ViewFiles
     * @summary Load File Details
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesByNameInfoGet: (name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all your available files. Required Access Level: ViewFiles
     * @summary List Files
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesGet: (limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Uploads selected file to the server. Required Access Level: ModifyFiles
     * @summary Upload File
     * @param {FilePayload} filePayload
     * @param {number} [expiresAfterDays] After how many days should the file be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesPost: (filePayload: FilePayload, expiresAfterDays?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FilesApi - functional programming interface
 * @export
 */
export declare const FilesApiFp: (configuration?: Configuration) => {
    /**
     * Permanently deletes the file from your Account. Required Access Level: ModifyFiles
     * @summary Delete File
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesByNameDelete(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets content of the specified File. Required Access Level: ViewFiles
     * @summary Download File
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesByNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>>;
    /**
     * Returns the specified File\'s details. Required Access Level: ViewFiles
     * @summary Load File Details
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesByNameInfoGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>>;
    /**
     * Returns a list of all your available files. Required Access Level: ViewFiles
     * @summary List Files
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileInfo>>>;
    /**
     * Uploads selected file to the server. Required Access Level: ModifyFiles
     * @summary Upload File
     * @param {FilePayload} filePayload
     * @param {number} [expiresAfterDays] After how many days should the file be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesPost(filePayload: FilePayload, expiresAfterDays?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>>;
};
/**
 * FilesApi - factory interface
 * @export
 */
export declare const FilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Permanently deletes the file from your Account. Required Access Level: ModifyFiles
     * @summary Delete File
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesByNameDelete(name: string, options?: any): AxiosPromise<void>;
    /**
     * Gets content of the specified File. Required Access Level: ViewFiles
     * @summary Download File
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesByNameGet(name: string, options?: any): AxiosPromise<File>;
    /**
     * Returns the specified File\'s details. Required Access Level: ViewFiles
     * @summary Load File Details
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesByNameInfoGet(name: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * Returns a list of all your available files. Required Access Level: ViewFiles
     * @summary List Files
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesGet(limit?: number, offset?: number, options?: any): AxiosPromise<Array<FileInfo>>;
    /**
     * Uploads selected file to the server. Required Access Level: ModifyFiles
     * @summary Upload File
     * @param {FilePayload} filePayload
     * @param {number} [expiresAfterDays] After how many days should the file be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesPost(filePayload: FilePayload, expiresAfterDays?: number, options?: any): AxiosPromise<FileInfo>;
};
/**
 * FilesApi - interface
 * @export
 * @interface FilesApi
 */
export interface FilesApiInterface {
    /**
     * Permanently deletes the file from your Account. Required Access Level: ModifyFiles
     * @summary Delete File
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    filesByNameDelete(name: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Gets content of the specified File. Required Access Level: ViewFiles
     * @summary Download File
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    filesByNameGet(name: string, options?: AxiosRequestConfig): AxiosPromise<File>;
    /**
     * Returns the specified File\'s details. Required Access Level: ViewFiles
     * @summary Load File Details
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    filesByNameInfoGet(name: string, options?: AxiosRequestConfig): AxiosPromise<FileInfo>;
    /**
     * Returns a list of all your available files. Required Access Level: ViewFiles
     * @summary List Files
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    filesGet(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<FileInfo>>;
    /**
     * Uploads selected file to the server. Required Access Level: ModifyFiles
     * @summary Upload File
     * @param {FilePayload} filePayload
     * @param {number} [expiresAfterDays] After how many days should the file be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    filesPost(filePayload: FilePayload, expiresAfterDays?: number, options?: AxiosRequestConfig): AxiosPromise<FileInfo>;
}
/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export declare class FilesApi extends BaseAPI implements FilesApiInterface {
    /**
     * Permanently deletes the file from your Account. Required Access Level: ModifyFiles
     * @summary Delete File
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    filesByNameDelete(name: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Gets content of the specified File. Required Access Level: ViewFiles
     * @summary Download File
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    filesByNameGet(name: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<File>>;
    /**
     * Returns the specified File\'s details. Required Access Level: ViewFiles
     * @summary Load File Details
     * @param {string} name Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    filesByNameInfoGet(name: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FileInfo>>;
    /**
     * Returns a list of all your available files. Required Access Level: ViewFiles
     * @summary List Files
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    filesGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FileInfo[]>>;
    /**
     * Uploads selected file to the server. Required Access Level: ModifyFiles
     * @summary Upload File
     * @param {FilePayload} filePayload
     * @param {number} [expiresAfterDays] After how many days should the file be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    filesPost(filePayload: FilePayload, expiresAfterDays?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FileInfo>>;
}
