/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { Suppression } from '../ee-api-models';
/**
 * SuppressionsApi - axios parameter creator
 * @export
 */
export declare const SuppressionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Bounce List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsBouncesGet: (search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsBouncesImportPost: (file?: File, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces
     * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsBouncesPost: (requestBody: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Delete Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsByEmailDelete: (email: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsByEmailGet: (email: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Complaints List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsComplaintsGet: (search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsComplaintsImportPost: (file?: File, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints
     * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsComplaintsPost: (requestBody: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppressions
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsGet: (limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Unsubscribes List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsUnsubscribesGet: (search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsUnsubscribesImportPost: (file?: File, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes
     * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsUnsubscribesPost: (requestBody: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SuppressionsApi - functional programming interface
 * @export
 */
export declare const SuppressionsApiFp: (configuration?: Configuration) => {
    /**
     * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Bounce List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsBouncesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>>;
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsBouncesImportPost(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces
     * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsBouncesPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>>;
    /**
     * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Delete Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsByEmailDelete(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsByEmailGet(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Suppression>>;
    /**
     * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Complaints List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsComplaintsGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>>;
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsComplaintsImportPost(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints
     * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsComplaintsPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>>;
    /**
     * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppressions
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>>;
    /**
     * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Unsubscribes List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsUnsubscribesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>>;
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsUnsubscribesImportPost(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes
     * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsUnsubscribesPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppression>>>;
};
/**
 * SuppressionsApi - factory interface
 * @export
 */
export declare const SuppressionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Bounce List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsBouncesGet(search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<Array<Suppression>>;
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsBouncesImportPost(file?: File, options?: any): AxiosPromise<void>;
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces
     * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsBouncesPost(requestBody: Array<string>, options?: any): AxiosPromise<Array<Suppression>>;
    /**
     * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Delete Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsByEmailDelete(email: string, options?: any): AxiosPromise<void>;
    /**
     * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsByEmailGet(email: string, options?: any): AxiosPromise<Suppression>;
    /**
     * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Complaints List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsComplaintsGet(search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<Array<Suppression>>;
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsComplaintsImportPost(file?: File, options?: any): AxiosPromise<void>;
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints
     * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsComplaintsPost(requestBody: Array<string>, options?: any): AxiosPromise<Array<Suppression>>;
    /**
     * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppressions
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsGet(limit?: number, offset?: number, options?: any): AxiosPromise<Array<Suppression>>;
    /**
     * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Unsubscribes List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsUnsubscribesGet(search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<Array<Suppression>>;
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsUnsubscribesImportPost(file?: File, options?: any): AxiosPromise<void>;
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes
     * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suppressionsUnsubscribesPost(requestBody: Array<string>, options?: any): AxiosPromise<Array<Suppression>>;
};
/**
 * SuppressionsApi - interface
 * @export
 * @interface SuppressionsApi
 */
export interface SuppressionsApiInterface {
    /**
     * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Bounce List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsBouncesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsBouncesImportPost(file?: File, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces
     * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsBouncesPost(requestBody: Array<string>, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;
    /**
     * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Delete Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsByEmailDelete(email: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsByEmailGet(email: string, options?: AxiosRequestConfig): AxiosPromise<Suppression>;
    /**
     * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Complaints List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsComplaintsGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsComplaintsImportPost(file?: File, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints
     * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsComplaintsPost(requestBody: Array<string>, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;
    /**
     * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppressions
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;
    /**
     * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Unsubscribes List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsUnsubscribesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsUnsubscribesImportPost(file?: File, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes
     * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApiInterface
     */
    suppressionsUnsubscribesPost(requestBody: Array<string>, options?: AxiosRequestConfig): AxiosPromise<Array<Suppression>>;
}
/**
 * SuppressionsApi - object-oriented interface
 * @export
 * @class SuppressionsApi
 * @extends {BaseAPI}
 */
export declare class SuppressionsApi extends BaseAPI implements SuppressionsApiInterface {
    /**
     * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Bounce List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsBouncesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Suppression[]>>;
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsBouncesImportPost(file?: File, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces
     * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsBouncesPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Suppression[]>>;
    /**
     * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Delete Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsByEmailDelete(email: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsByEmailGet(email: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Suppression>>;
    /**
     * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Complaints List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsComplaintsGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Suppression[]>>;
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsComplaintsImportPost(file?: File, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints
     * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsComplaintsPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Suppression[]>>;
    /**
     * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppressions
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Suppression[]>>;
    /**
     * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Unsubscribes List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsUnsubscribesGet(search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Suppression[]>>;
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsUnsubscribesImportPost(file?: File, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes
     * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsUnsubscribesPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Suppression[]>>;
}
