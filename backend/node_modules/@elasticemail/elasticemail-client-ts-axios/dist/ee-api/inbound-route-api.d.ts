/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { InboundPayload } from '../ee-api-models';
import { InboundRoute } from '../ee-api-models';
import { SortOrderItem } from '../ee-api-models';
/**
 * InboundRouteApi - axios parameter creator
 * @export
 */
export declare const InboundRouteApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes the Inbound Route. Required Access Level: ModifySettings
     * @summary Delete Route
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteByIdDelete: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Load an Inbound Route. Required Access Level: ViewSettings
     * @summary Get Route
     * @param {string} id ID number of your attachment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteByIdGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the Inbound Route. Required Access Level: ModifySettings
     * @summary Update Route
     * @param {string} id
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteByIdPut: (id: string, inboundPayload: InboundPayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all your Inbound Routes. Required Access Level: ViewSettings
     * @summary Get Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Required Access Level: ViewSettings
     * @summary Update Sorting
     * @param {Array<SortOrderItem>} sortOrderItem Change the ordering of inbound routes for when matching the inbound
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteOrderPut: (sortOrderItem: Array<SortOrderItem>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create new Inbound Route. Required Access Level: ModifySettings
     * @summary Create Route
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundroutePost: (inboundPayload: InboundPayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InboundRouteApi - functional programming interface
 * @export
 */
export declare const InboundRouteApiFp: (configuration?: Configuration) => {
    /**
     * Deletes the Inbound Route. Required Access Level: ModifySettings
     * @summary Delete Route
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteByIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Load an Inbound Route. Required Access Level: ViewSettings
     * @summary Get Route
     * @param {string} id ID number of your attachment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteByIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundRoute>>;
    /**
     * Update the Inbound Route. Required Access Level: ModifySettings
     * @summary Update Route
     * @param {string} id
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteByIdPut(id: string, inboundPayload: InboundPayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundRoute>>;
    /**
     * Get all your Inbound Routes. Required Access Level: ViewSettings
     * @summary Get Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InboundRoute>>>;
    /**
     * Required Access Level: ViewSettings
     * @summary Update Sorting
     * @param {Array<SortOrderItem>} sortOrderItem Change the ordering of inbound routes for when matching the inbound
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteOrderPut(sortOrderItem: Array<SortOrderItem>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InboundRoute>>>;
    /**
     * Create new Inbound Route. Required Access Level: ModifySettings
     * @summary Create Route
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundroutePost(inboundPayload: InboundPayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundRoute>>;
};
/**
 * InboundRouteApi - factory interface
 * @export
 */
export declare const InboundRouteApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes the Inbound Route. Required Access Level: ModifySettings
     * @summary Delete Route
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteByIdDelete(id: string, options?: any): AxiosPromise<void>;
    /**
     * Load an Inbound Route. Required Access Level: ViewSettings
     * @summary Get Route
     * @param {string} id ID number of your attachment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteByIdGet(id: string, options?: any): AxiosPromise<InboundRoute>;
    /**
     * Update the Inbound Route. Required Access Level: ModifySettings
     * @summary Update Route
     * @param {string} id
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteByIdPut(id: string, inboundPayload: InboundPayload, options?: any): AxiosPromise<InboundRoute>;
    /**
     * Get all your Inbound Routes. Required Access Level: ViewSettings
     * @summary Get Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteGet(options?: any): AxiosPromise<Array<InboundRoute>>;
    /**
     * Required Access Level: ViewSettings
     * @summary Update Sorting
     * @param {Array<SortOrderItem>} sortOrderItem Change the ordering of inbound routes for when matching the inbound
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundrouteOrderPut(sortOrderItem: Array<SortOrderItem>, options?: any): AxiosPromise<Array<InboundRoute>>;
    /**
     * Create new Inbound Route. Required Access Level: ModifySettings
     * @summary Create Route
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inboundroutePost(inboundPayload: InboundPayload, options?: any): AxiosPromise<InboundRoute>;
};
/**
 * InboundRouteApi - interface
 * @export
 * @interface InboundRouteApi
 */
export interface InboundRouteApiInterface {
    /**
     * Deletes the Inbound Route. Required Access Level: ModifySettings
     * @summary Delete Route
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApiInterface
     */
    inboundrouteByIdDelete(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Load an Inbound Route. Required Access Level: ViewSettings
     * @summary Get Route
     * @param {string} id ID number of your attachment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApiInterface
     */
    inboundrouteByIdGet(id: string, options?: AxiosRequestConfig): AxiosPromise<InboundRoute>;
    /**
     * Update the Inbound Route. Required Access Level: ModifySettings
     * @summary Update Route
     * @param {string} id
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApiInterface
     */
    inboundrouteByIdPut(id: string, inboundPayload: InboundPayload, options?: AxiosRequestConfig): AxiosPromise<InboundRoute>;
    /**
     * Get all your Inbound Routes. Required Access Level: ViewSettings
     * @summary Get Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApiInterface
     */
    inboundrouteGet(options?: AxiosRequestConfig): AxiosPromise<Array<InboundRoute>>;
    /**
     * Required Access Level: ViewSettings
     * @summary Update Sorting
     * @param {Array<SortOrderItem>} sortOrderItem Change the ordering of inbound routes for when matching the inbound
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApiInterface
     */
    inboundrouteOrderPut(sortOrderItem: Array<SortOrderItem>, options?: AxiosRequestConfig): AxiosPromise<Array<InboundRoute>>;
    /**
     * Create new Inbound Route. Required Access Level: ModifySettings
     * @summary Create Route
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApiInterface
     */
    inboundroutePost(inboundPayload: InboundPayload, options?: AxiosRequestConfig): AxiosPromise<InboundRoute>;
}
/**
 * InboundRouteApi - object-oriented interface
 * @export
 * @class InboundRouteApi
 * @extends {BaseAPI}
 */
export declare class InboundRouteApi extends BaseAPI implements InboundRouteApiInterface {
    /**
     * Deletes the Inbound Route. Required Access Level: ModifySettings
     * @summary Delete Route
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundrouteByIdDelete(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Load an Inbound Route. Required Access Level: ViewSettings
     * @summary Get Route
     * @param {string} id ID number of your attachment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundrouteByIdGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InboundRoute>>;
    /**
     * Update the Inbound Route. Required Access Level: ModifySettings
     * @summary Update Route
     * @param {string} id
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundrouteByIdPut(id: string, inboundPayload: InboundPayload, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InboundRoute>>;
    /**
     * Get all your Inbound Routes. Required Access Level: ViewSettings
     * @summary Get Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundrouteGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InboundRoute[]>>;
    /**
     * Required Access Level: ViewSettings
     * @summary Update Sorting
     * @param {Array<SortOrderItem>} sortOrderItem Change the ordering of inbound routes for when matching the inbound
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundrouteOrderPut(sortOrderItem: Array<SortOrderItem>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InboundRoute[]>>;
    /**
     * Create new Inbound Route. Required Access Level: ModifySettings
     * @summary Create Route
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundroutePost(inboundPayload: InboundPayload, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InboundRoute>>;
}
