"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListsApi = exports.ListsApiFactory = exports.ListsApiFp = exports.ListsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ListsApi - axios parameter creator
 * @export
 */
exports.ListsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add existing Contacts to specified list. Required Access Level: ModifyContacts
         * @summary Add Contacts to List
         * @param {string} name Name of your list.
         * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameContactsPost: (name, emailsPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('listsByNameContactsPost', 'name', name);
            // verify required parameter 'emailsPayload' is not null or undefined
            common_1.assertParamExists('listsByNameContactsPost', 'emailsPayload', emailsPayload);
            const localVarPath = `/lists/{name}/contacts`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(emailsPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Remove specified Contacts from your list. Required Access Level: ModifyContacts
         * @summary Remove Contacts from List
         * @param {string} name Name of your list.
         * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameContactsRemovePost: (name, emailsPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('listsByNameContactsRemovePost', 'name', name);
            // verify required parameter 'emailsPayload' is not null or undefined
            common_1.assertParamExists('listsByNameContactsRemovePost', 'emailsPayload', emailsPayload);
            const localVarPath = `/lists/{name}/contacts/remove`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(emailsPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
         * @summary Delete List
         * @param {string} name Name of your list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameDelete: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('listsByNameDelete', 'name', name);
            const localVarPath = `/lists/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns detailed information about specified list. Required Access Level: ViewContacts
         * @summary Load List
         * @param {string} name Name of your list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameGet: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('listsByNameGet', 'name', name);
            const localVarPath = `/lists/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update existing list. Required Access Level: ModifyContacts
         * @summary Update List
         * @param {string} name Name of your list.
         * @param {ListUpdatePayload} listUpdatePayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNamePut: (name, listUpdatePayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('listsByNamePut', 'name', name);
            // verify required parameter 'listUpdatePayload' is not null or undefined
            common_1.assertParamExists('listsByNamePut', 'listUpdatePayload', listUpdatePayload);
            const localVarPath = `/lists/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(listUpdatePayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns all your existing lists. Required Access Level: ViewContacts
         * @summary Load Lists
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet: (limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a new list. Required Access Level: ModifyContacts
         * @summary Add List
         * @param {ListPayload} listPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost: (listPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'listPayload' is not null or undefined
            common_1.assertParamExists('listsPost', 'listPayload', listPayload);
            const localVarPath = `/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(listPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ListsApi - functional programming interface
 * @export
 */
exports.ListsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ListsApiAxiosParamCreator(configuration);
    return {
        /**
         * Add existing Contacts to specified list. Required Access Level: ModifyContacts
         * @summary Add Contacts to List
         * @param {string} name Name of your list.
         * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameContactsPost(name, emailsPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listsByNameContactsPost(name, emailsPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Remove specified Contacts from your list. Required Access Level: ModifyContacts
         * @summary Remove Contacts from List
         * @param {string} name Name of your list.
         * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameContactsRemovePost(name, emailsPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listsByNameContactsRemovePost(name, emailsPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
         * @summary Delete List
         * @param {string} name Name of your list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameDelete(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listsByNameDelete(name, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns detailed information about specified list. Required Access Level: ViewContacts
         * @summary Load List
         * @param {string} name Name of your list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameGet(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listsByNameGet(name, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update existing list. Required Access Level: ModifyContacts
         * @summary Update List
         * @param {string} name Name of your list.
         * @param {ListUpdatePayload} listUpdatePayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNamePut(name, listUpdatePayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listsByNamePut(name, listUpdatePayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns all your existing lists. Required Access Level: ViewContacts
         * @summary Load Lists
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listsGet(limit, offset, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a new list. Required Access Level: ModifyContacts
         * @summary Add List
         * @param {ListPayload} listPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost(listPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listsPost(listPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ListsApi - factory interface
 * @export
 */
exports.ListsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ListsApiFp(configuration);
    return {
        /**
         * Add existing Contacts to specified list. Required Access Level: ModifyContacts
         * @summary Add Contacts to List
         * @param {string} name Name of your list.
         * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameContactsPost(name, emailsPayload, options) {
            return localVarFp.listsByNameContactsPost(name, emailsPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove specified Contacts from your list. Required Access Level: ModifyContacts
         * @summary Remove Contacts from List
         * @param {string} name Name of your list.
         * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameContactsRemovePost(name, emailsPayload, options) {
            return localVarFp.listsByNameContactsRemovePost(name, emailsPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
         * @summary Delete List
         * @param {string} name Name of your list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameDelete(name, options) {
            return localVarFp.listsByNameDelete(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns detailed information about specified list. Required Access Level: ViewContacts
         * @summary Load List
         * @param {string} name Name of your list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNameGet(name, options) {
            return localVarFp.listsByNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing list. Required Access Level: ModifyContacts
         * @summary Update List
         * @param {string} name Name of your list.
         * @param {ListUpdatePayload} listUpdatePayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsByNamePut(name, listUpdatePayload, options) {
            return localVarFp.listsByNamePut(name, listUpdatePayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all your existing lists. Required Access Level: ViewContacts
         * @summary Load Lists
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet(limit, offset, options) {
            return localVarFp.listsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new list. Required Access Level: ModifyContacts
         * @summary Add List
         * @param {ListPayload} listPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost(listPayload, options) {
            return localVarFp.listsPost(listPayload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
class ListsApi extends base_1.BaseAPI {
    /**
     * Add existing Contacts to specified list. Required Access Level: ModifyContacts
     * @summary Add Contacts to List
     * @param {string} name Name of your list.
     * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    listsByNameContactsPost(name, emailsPayload, options) {
        return exports.ListsApiFp(this.configuration).listsByNameContactsPost(name, emailsPayload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove specified Contacts from your list. Required Access Level: ModifyContacts
     * @summary Remove Contacts from List
     * @param {string} name Name of your list.
     * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    listsByNameContactsRemovePost(name, emailsPayload, options) {
        return exports.ListsApiFp(this.configuration).listsByNameContactsRemovePost(name, emailsPayload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes List and removes all the Contacts from it (does not delete Contacts). Required Access Level: ModifyContacts
     * @summary Delete List
     * @param {string} name Name of your list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    listsByNameDelete(name, options) {
        return exports.ListsApiFp(this.configuration).listsByNameDelete(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns detailed information about specified list. Required Access Level: ViewContacts
     * @summary Load List
     * @param {string} name Name of your list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    listsByNameGet(name, options) {
        return exports.ListsApiFp(this.configuration).listsByNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update existing list. Required Access Level: ModifyContacts
     * @summary Update List
     * @param {string} name Name of your list.
     * @param {ListUpdatePayload} listUpdatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    listsByNamePut(name, listUpdatePayload, options) {
        return exports.ListsApiFp(this.configuration).listsByNamePut(name, listUpdatePayload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all your existing lists. Required Access Level: ViewContacts
     * @summary Load Lists
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    listsGet(limit, offset, options) {
        return exports.ListsApiFp(this.configuration).listsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a new list. Required Access Level: ModifyContacts
     * @summary Add List
     * @param {ListPayload} listPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    listsPost(listPayload, options) {
        return exports.ListsApiFp(this.configuration).listsPost(listPayload, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ListsApi = ListsApi;
