/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { Template } from '../ee-api-models';
import { TemplatePayload } from '../ee-api-models';
import { TemplateScope } from '../ee-api-models';
import { TemplateType } from '../ee-api-models';
/**
 * TemplatesApi - axios parameter creator
 * @export
 */
export declare const TemplatesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete template with the specified name. Required Access Level: ModifyTemplates
     * @summary Delete Template
     * @param {string} name Name of template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesByNameDelete: (name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Load detailed information of the specified template. Required Access Level: ViewTemplates
     * @summary Load Template
     * @param {string} name Name of template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesByNameGet: (name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
     * @summary Update Template
     * @param {string} name Name of template.
     * @param {TemplatePayload} templatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesByNamePut: (name: string, templatePayload: TemplatePayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of templates for the specified type. Required Access Level: ViewTemplates
     * @summary Load Templates
     * @param {Array<TemplateScope>} scopeType Return templates with specified scope only
     * @param {Array<TemplateType>} [templateTypes] Return templates with specified type only
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesGet: (scopeType: Array<TemplateScope>, templateTypes?: Array<TemplateType>, limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add a new Template. Required Access Level: ModifyTemplates
     * @summary Add Template
     * @param {TemplatePayload} templatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesPost: (templatePayload: TemplatePayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TemplatesApi - functional programming interface
 * @export
 */
export declare const TemplatesApiFp: (configuration?: Configuration) => {
    /**
     * Delete template with the specified name. Required Access Level: ModifyTemplates
     * @summary Delete Template
     * @param {string} name Name of template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesByNameDelete(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Load detailed information of the specified template. Required Access Level: ViewTemplates
     * @summary Load Template
     * @param {string} name Name of template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesByNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template>>;
    /**
     * Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
     * @summary Update Template
     * @param {string} name Name of template.
     * @param {TemplatePayload} templatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesByNamePut(name: string, templatePayload: TemplatePayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template>>;
    /**
     * Returns a list of templates for the specified type. Required Access Level: ViewTemplates
     * @summary Load Templates
     * @param {Array<TemplateScope>} scopeType Return templates with specified scope only
     * @param {Array<TemplateType>} [templateTypes] Return templates with specified type only
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesGet(scopeType: Array<TemplateScope>, templateTypes?: Array<TemplateType>, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Template>>>;
    /**
     * Add a new Template. Required Access Level: ModifyTemplates
     * @summary Add Template
     * @param {TemplatePayload} templatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesPost(templatePayload: TemplatePayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template>>;
};
/**
 * TemplatesApi - factory interface
 * @export
 */
export declare const TemplatesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete template with the specified name. Required Access Level: ModifyTemplates
     * @summary Delete Template
     * @param {string} name Name of template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesByNameDelete(name: string, options?: any): AxiosPromise<void>;
    /**
     * Load detailed information of the specified template. Required Access Level: ViewTemplates
     * @summary Load Template
     * @param {string} name Name of template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesByNameGet(name: string, options?: any): AxiosPromise<Template>;
    /**
     * Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
     * @summary Update Template
     * @param {string} name Name of template.
     * @param {TemplatePayload} templatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesByNamePut(name: string, templatePayload: TemplatePayload, options?: any): AxiosPromise<Template>;
    /**
     * Returns a list of templates for the specified type. Required Access Level: ViewTemplates
     * @summary Load Templates
     * @param {Array<TemplateScope>} scopeType Return templates with specified scope only
     * @param {Array<TemplateType>} [templateTypes] Return templates with specified type only
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesGet(scopeType: Array<TemplateScope>, templateTypes?: Array<TemplateType>, limit?: number, offset?: number, options?: any): AxiosPromise<Array<Template>>;
    /**
     * Add a new Template. Required Access Level: ModifyTemplates
     * @summary Add Template
     * @param {TemplatePayload} templatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templatesPost(templatePayload: TemplatePayload, options?: any): AxiosPromise<Template>;
};
/**
 * TemplatesApi - interface
 * @export
 * @interface TemplatesApi
 */
export interface TemplatesApiInterface {
    /**
     * Delete template with the specified name. Required Access Level: ModifyTemplates
     * @summary Delete Template
     * @param {string} name Name of template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiInterface
     */
    templatesByNameDelete(name: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Load detailed information of the specified template. Required Access Level: ViewTemplates
     * @summary Load Template
     * @param {string} name Name of template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiInterface
     */
    templatesByNameGet(name: string, options?: AxiosRequestConfig): AxiosPromise<Template>;
    /**
     * Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
     * @summary Update Template
     * @param {string} name Name of template.
     * @param {TemplatePayload} templatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiInterface
     */
    templatesByNamePut(name: string, templatePayload: TemplatePayload, options?: AxiosRequestConfig): AxiosPromise<Template>;
    /**
     * Returns a list of templates for the specified type. Required Access Level: ViewTemplates
     * @summary Load Templates
     * @param {Array<TemplateScope>} scopeType Return templates with specified scope only
     * @param {Array<TemplateType>} [templateTypes] Return templates with specified type only
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiInterface
     */
    templatesGet(scopeType: Array<TemplateScope>, templateTypes?: Array<TemplateType>, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Template>>;
    /**
     * Add a new Template. Required Access Level: ModifyTemplates
     * @summary Add Template
     * @param {TemplatePayload} templatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiInterface
     */
    templatesPost(templatePayload: TemplatePayload, options?: AxiosRequestConfig): AxiosPromise<Template>;
}
/**
 * TemplatesApi - object-oriented interface
 * @export
 * @class TemplatesApi
 * @extends {BaseAPI}
 */
export declare class TemplatesApi extends BaseAPI implements TemplatesApiInterface {
    /**
     * Delete template with the specified name. Required Access Level: ModifyTemplates
     * @summary Delete Template
     * @param {string} name Name of template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    templatesByNameDelete(name: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Load detailed information of the specified template. Required Access Level: ViewTemplates
     * @summary Load Template
     * @param {string} name Name of template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    templatesByNameGet(name: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Template>>;
    /**
     * Update existing template, overwriting existing data. Required Access Level: ModifyTemplates
     * @summary Update Template
     * @param {string} name Name of template.
     * @param {TemplatePayload} templatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    templatesByNamePut(name: string, templatePayload: TemplatePayload, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Template>>;
    /**
     * Returns a list of templates for the specified type. Required Access Level: ViewTemplates
     * @summary Load Templates
     * @param {Array<TemplateScope>} scopeType Return templates with specified scope only
     * @param {Array<TemplateType>} [templateTypes] Return templates with specified type only
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    templatesGet(scopeType: Array<TemplateScope>, templateTypes?: Array<TemplateType>, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Template[]>>;
    /**
     * Add a new Template. Required Access Level: ModifyTemplates
     * @summary Add Template
     * @param {TemplatePayload} templatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    templatesPost(templatePayload: TemplatePayload, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Template>>;
}
