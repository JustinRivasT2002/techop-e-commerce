"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContactsApi = exports.ContactsApiFactory = exports.ContactsApiFp = exports.ContactsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ContactsApi - axios parameter creator
 * @export
 */
exports.ContactsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Deletes the provided contact. Required Access Level: ModifyContacts
         * @summary Delete Contact
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsByEmailDelete: (email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('contactsByEmailDelete', 'email', email);
            const localVarPath = `/contacts/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Load detailed contact information for specified email. Required Access Level: ViewContacts
         * @summary Load Contact
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsByEmailGet: (email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('contactsByEmailGet', 'email', email);
            const localVarPath = `/contacts/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update selected contact. Omitted contact\'s fields will not be changed. Required Access Level: ModifyContacts
         * @summary Update Contact
         * @param {string} email Proper email address.
         * @param {ContactUpdatePayload} contactUpdatePayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsByEmailPut: (email, contactUpdatePayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('contactsByEmailPut', 'email', email);
            // verify required parameter 'contactUpdatePayload' is not null or undefined
            common_1.assertParamExists('contactsByEmailPut', 'contactUpdatePayload', contactUpdatePayload);
            const localVarPath = `/contacts/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(contactUpdatePayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes provided contacts in bulk. Required Access Level: ModifyContacts
         * @summary Delete Contacts Bulk
         * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsDeletePost: (emailsPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'emailsPayload' is not null or undefined
            common_1.assertParamExists('contactsDeletePost', 'emailsPayload', emailsPayload);
            const localVarPath = `/contacts/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(emailsPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Check the current status of the export. Required Access Level: Export
         * @summary Check Export Status
         * @param {string} id ID of the exported file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsExportByIdStatusGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('contactsExportByIdStatusGet', 'id', id);
            const localVarPath = `/contacts/export/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Request an Export of specified Contacts. Required Access Level: Export
         * @summary Export Contacts
         * @param {ExportFileFormats} [fileFormat] Format of the exported file
         * @param {string} [rule] Query used for filtering.
         * @param {Array<string>} [emails] Comma delimited list of contact emails
         * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
         * @param {string} [fileName] Name of your file including extension.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsExportPost: (fileFormat, rule, emails, compressionFormat, fileName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/contacts/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (fileFormat !== undefined) {
                localVarQueryParameter['fileFormat'] = fileFormat;
            }
            if (rule !== undefined) {
                localVarQueryParameter['rule'] = rule;
            }
            if (emails) {
                localVarQueryParameter['emails'] = emails;
            }
            if (compressionFormat !== undefined) {
                localVarQueryParameter['compressionFormat'] = compressionFormat;
            }
            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of contacts. Required Access Level: ViewContacts
         * @summary Load Contacts
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsGet: (limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Upload contacts from a file. Required Access Level: ModifyContacts
         * @summary Upload Contacts
         * @param {string} [listName] Name of an existing list to add these contacts to
         * @param {string} [encodingName] In what encoding the file is uploaded
         * @param {string} [fileUrl] Optional url of csv to import
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsImportPost: (listName, encodingName, fileUrl, file, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/contacts/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (listName !== undefined) {
                localVarQueryParameter['listName'] = listName;
            }
            if (encodingName !== undefined) {
                localVarQueryParameter['encodingName'] = encodingName;
            }
            if (fileUrl !== undefined) {
                localVarQueryParameter['fileUrl'] = fileUrl;
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
         * @summary Add Contact
         * @param {Array<ContactPayload>} contactPayload
         * @param {Array<string>} [listnames] Names of lists to which the uploaded contacts should be added to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsPost: (contactPayload, listnames, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'contactPayload' is not null or undefined
            common_1.assertParamExists('contactsPost', 'contactPayload', contactPayload);
            const localVarPath = `/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (listnames) {
                localVarQueryParameter['listnames'] = listnames;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(contactPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ContactsApi - functional programming interface
 * @export
 */
exports.ContactsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ContactsApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes the provided contact. Required Access Level: ModifyContacts
         * @summary Delete Contact
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsByEmailDelete(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contactsByEmailDelete(email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Load detailed contact information for specified email. Required Access Level: ViewContacts
         * @summary Load Contact
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsByEmailGet(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contactsByEmailGet(email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update selected contact. Omitted contact\'s fields will not be changed. Required Access Level: ModifyContacts
         * @summary Update Contact
         * @param {string} email Proper email address.
         * @param {ContactUpdatePayload} contactUpdatePayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsByEmailPut(email, contactUpdatePayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contactsByEmailPut(email, contactUpdatePayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes provided contacts in bulk. Required Access Level: ModifyContacts
         * @summary Delete Contacts Bulk
         * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsDeletePost(emailsPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contactsDeletePost(emailsPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Check the current status of the export. Required Access Level: Export
         * @summary Check Export Status
         * @param {string} id ID of the exported file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsExportByIdStatusGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contactsExportByIdStatusGet(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Request an Export of specified Contacts. Required Access Level: Export
         * @summary Export Contacts
         * @param {ExportFileFormats} [fileFormat] Format of the exported file
         * @param {string} [rule] Query used for filtering.
         * @param {Array<string>} [emails] Comma delimited list of contact emails
         * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
         * @param {string} [fileName] Name of your file including extension.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsExportPost(fileFormat, rule, emails, compressionFormat, fileName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contactsExportPost(fileFormat, rule, emails, compressionFormat, fileName, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of contacts. Required Access Level: ViewContacts
         * @summary Load Contacts
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsGet(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contactsGet(limit, offset, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Upload contacts from a file. Required Access Level: ModifyContacts
         * @summary Upload Contacts
         * @param {string} [listName] Name of an existing list to add these contacts to
         * @param {string} [encodingName] In what encoding the file is uploaded
         * @param {string} [fileUrl] Optional url of csv to import
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsImportPost(listName, encodingName, fileUrl, file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contactsImportPost(listName, encodingName, fileUrl, file, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
         * @summary Add Contact
         * @param {Array<ContactPayload>} contactPayload
         * @param {Array<string>} [listnames] Names of lists to which the uploaded contacts should be added to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsPost(contactPayload, listnames, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contactsPost(contactPayload, listnames, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ContactsApi - factory interface
 * @export
 */
exports.ContactsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ContactsApiFp(configuration);
    return {
        /**
         * Deletes the provided contact. Required Access Level: ModifyContacts
         * @summary Delete Contact
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsByEmailDelete(email, options) {
            return localVarFp.contactsByEmailDelete(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Load detailed contact information for specified email. Required Access Level: ViewContacts
         * @summary Load Contact
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsByEmailGet(email, options) {
            return localVarFp.contactsByEmailGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Update selected contact. Omitted contact\'s fields will not be changed. Required Access Level: ModifyContacts
         * @summary Update Contact
         * @param {string} email Proper email address.
         * @param {ContactUpdatePayload} contactUpdatePayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsByEmailPut(email, contactUpdatePayload, options) {
            return localVarFp.contactsByEmailPut(email, contactUpdatePayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes provided contacts in bulk. Required Access Level: ModifyContacts
         * @summary Delete Contacts Bulk
         * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsDeletePost(emailsPayload, options) {
            return localVarFp.contactsDeletePost(emailsPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Check the current status of the export. Required Access Level: Export
         * @summary Check Export Status
         * @param {string} id ID of the exported file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsExportByIdStatusGet(id, options) {
            return localVarFp.contactsExportByIdStatusGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Request an Export of specified Contacts. Required Access Level: Export
         * @summary Export Contacts
         * @param {ExportFileFormats} [fileFormat] Format of the exported file
         * @param {string} [rule] Query used for filtering.
         * @param {Array<string>} [emails] Comma delimited list of contact emails
         * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
         * @param {string} [fileName] Name of your file including extension.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsExportPost(fileFormat, rule, emails, compressionFormat, fileName, options) {
            return localVarFp.contactsExportPost(fileFormat, rule, emails, compressionFormat, fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of contacts. Required Access Level: ViewContacts
         * @summary Load Contacts
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsGet(limit, offset, options) {
            return localVarFp.contactsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload contacts from a file. Required Access Level: ModifyContacts
         * @summary Upload Contacts
         * @param {string} [listName] Name of an existing list to add these contacts to
         * @param {string} [encodingName] In what encoding the file is uploaded
         * @param {string} [fileUrl] Optional url of csv to import
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsImportPost(listName, encodingName, fileUrl, file, options) {
            return localVarFp.contactsImportPost(listName, encodingName, fileUrl, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
         * @summary Add Contact
         * @param {Array<ContactPayload>} contactPayload
         * @param {Array<string>} [listnames] Names of lists to which the uploaded contacts should be added to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactsPost(contactPayload, listnames, options) {
            return localVarFp.contactsPost(contactPayload, listnames, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ContactsApi - object-oriented interface
 * @export
 * @class ContactsApi
 * @extends {BaseAPI}
 */
class ContactsApi extends base_1.BaseAPI {
    /**
     * Deletes the provided contact. Required Access Level: ModifyContacts
     * @summary Delete Contact
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    contactsByEmailDelete(email, options) {
        return exports.ContactsApiFp(this.configuration).contactsByEmailDelete(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Load detailed contact information for specified email. Required Access Level: ViewContacts
     * @summary Load Contact
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    contactsByEmailGet(email, options) {
        return exports.ContactsApiFp(this.configuration).contactsByEmailGet(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update selected contact. Omitted contact\'s fields will not be changed. Required Access Level: ModifyContacts
     * @summary Update Contact
     * @param {string} email Proper email address.
     * @param {ContactUpdatePayload} contactUpdatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    contactsByEmailPut(email, contactUpdatePayload, options) {
        return exports.ContactsApiFp(this.configuration).contactsByEmailPut(email, contactUpdatePayload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes provided contacts in bulk. Required Access Level: ModifyContacts
     * @summary Delete Contacts Bulk
     * @param {EmailsPayload} emailsPayload Provide either rule or a list of emails, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    contactsDeletePost(emailsPayload, options) {
        return exports.ContactsApiFp(this.configuration).contactsDeletePost(emailsPayload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check the current status of the export. Required Access Level: Export
     * @summary Check Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    contactsExportByIdStatusGet(id, options) {
        return exports.ContactsApiFp(this.configuration).contactsExportByIdStatusGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Request an Export of specified Contacts. Required Access Level: Export
     * @summary Export Contacts
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {string} [rule] Query used for filtering.
     * @param {Array<string>} [emails] Comma delimited list of contact emails
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    contactsExportPost(fileFormat, rule, emails, compressionFormat, fileName, options) {
        return exports.ContactsApiFp(this.configuration).contactsExportPost(fileFormat, rule, emails, compressionFormat, fileName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of contacts. Required Access Level: ViewContacts
     * @summary Load Contacts
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    contactsGet(limit, offset, options) {
        return exports.ContactsApiFp(this.configuration).contactsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload contacts from a file. Required Access Level: ModifyContacts
     * @summary Upload Contacts
     * @param {string} [listName] Name of an existing list to add these contacts to
     * @param {string} [encodingName] In what encoding the file is uploaded
     * @param {string} [fileUrl] Optional url of csv to import
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    contactsImportPost(listName, encodingName, fileUrl, file, options) {
        return exports.ContactsApiFp(this.configuration).contactsImportPost(listName, encodingName, fileUrl, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
     * @summary Add Contact
     * @param {Array<ContactPayload>} contactPayload
     * @param {Array<string>} [listnames] Names of lists to which the uploaded contacts should be added to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    contactsPost(contactPayload, listnames, options) {
        return exports.ContactsApiFp(this.configuration).contactsPost(contactPayload, listnames, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ContactsApi = ContactsApi;
