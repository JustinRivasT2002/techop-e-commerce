"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubAccountsApi = exports.SubAccountsApiFactory = exports.SubAccountsApiFp = exports.SubAccountsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SubAccountsApi - axios parameter creator
 * @export
 */
exports.SubAccountsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Update email credits of a subaccount by the given amount. Required Access Level: ModifySubAccounts
         * @summary Add, Subtract Email Credits
         * @param {string} email Email address of Sub-Account
         * @param {SubaccountEmailCreditsPayload} subaccountEmailCreditsPayload Amount of email credits to add or subtract from the current SubAccount email credits pool (positive or negative value)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailCreditsPatch: (email, subaccountEmailCreditsPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('subaccountsByEmailCreditsPatch', 'email', email);
            // verify required parameter 'subaccountEmailCreditsPayload' is not null or undefined
            common_1.assertParamExists('subaccountsByEmailCreditsPatch', 'subaccountEmailCreditsPayload', subaccountEmailCreditsPayload);
            const localVarPath = `/subaccounts/{email}/credits`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(subaccountEmailCreditsPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes specified SubAccount. An email will be sent to confirm this change. Required Access Level: ModifySubAccounts
         * @summary Delete SubAccount
         * @param {string} email Email address of Sub-Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailDelete: (email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('subaccountsByEmailDelete', 'email', email);
            const localVarPath = `/subaccounts/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns details for the specified SubAccount. Required Access Level: ViewSubAccounts
         * @summary Load SubAccount
         * @param {string} email Email address of Sub-Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailGet: (email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('subaccountsByEmailGet', 'email', email);
            const localVarPath = `/subaccounts/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update SubAccount email settings. Required Access Level: ModifySubAccounts
         * @summary Update SubAccount Email Settings
         * @param {string} email
         * @param {SubaccountEmailSettings} subaccountEmailSettings Updated Email Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailSettingsEmailPut: (email, subaccountEmailSettings, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('subaccountsByEmailSettingsEmailPut', 'email', email);
            // verify required parameter 'subaccountEmailSettings' is not null or undefined
            common_1.assertParamExists('subaccountsByEmailSettingsEmailPut', 'subaccountEmailSettings', subaccountEmailSettings);
            const localVarPath = `/subaccounts/{email}/settings/email`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(subaccountEmailSettings, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all your SubAccounts. Required Access Level: ViewSubAccounts
         * @summary Load SubAccounts
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsGet: (limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/subaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add a new SubAccount to your Account. To receive an access token for this SubAccount, make a POST security/apikeys request using the \'subaccount\' parameter. Required Access Level: ModifySubAccounts
         * @summary Add SubAccount
         * @param {SubaccountPayload} subaccountPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsPost: (subaccountPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subaccountPayload' is not null or undefined
            common_1.assertParamExists('subaccountsPost', 'subaccountPayload', subaccountPayload);
            const localVarPath = `/subaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(subaccountPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SubAccountsApi - functional programming interface
 * @export
 */
exports.SubAccountsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.SubAccountsApiAxiosParamCreator(configuration);
    return {
        /**
         * Update email credits of a subaccount by the given amount. Required Access Level: ModifySubAccounts
         * @summary Add, Subtract Email Credits
         * @param {string} email Email address of Sub-Account
         * @param {SubaccountEmailCreditsPayload} subaccountEmailCreditsPayload Amount of email credits to add or subtract from the current SubAccount email credits pool (positive or negative value)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailCreditsPatch(email, subaccountEmailCreditsPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subaccountsByEmailCreditsPatch(email, subaccountEmailCreditsPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes specified SubAccount. An email will be sent to confirm this change. Required Access Level: ModifySubAccounts
         * @summary Delete SubAccount
         * @param {string} email Email address of Sub-Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailDelete(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subaccountsByEmailDelete(email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns details for the specified SubAccount. Required Access Level: ViewSubAccounts
         * @summary Load SubAccount
         * @param {string} email Email address of Sub-Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailGet(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subaccountsByEmailGet(email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update SubAccount email settings. Required Access Level: ModifySubAccounts
         * @summary Update SubAccount Email Settings
         * @param {string} email
         * @param {SubaccountEmailSettings} subaccountEmailSettings Updated Email Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailSettingsEmailPut(email, subaccountEmailSettings, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subaccountsByEmailSettingsEmailPut(email, subaccountEmailSettings, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all your SubAccounts. Required Access Level: ViewSubAccounts
         * @summary Load SubAccounts
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsGet(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subaccountsGet(limit, offset, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add a new SubAccount to your Account. To receive an access token for this SubAccount, make a POST security/apikeys request using the \'subaccount\' parameter. Required Access Level: ModifySubAccounts
         * @summary Add SubAccount
         * @param {SubaccountPayload} subaccountPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsPost(subaccountPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subaccountsPost(subaccountPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SubAccountsApi - factory interface
 * @export
 */
exports.SubAccountsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.SubAccountsApiFp(configuration);
    return {
        /**
         * Update email credits of a subaccount by the given amount. Required Access Level: ModifySubAccounts
         * @summary Add, Subtract Email Credits
         * @param {string} email Email address of Sub-Account
         * @param {SubaccountEmailCreditsPayload} subaccountEmailCreditsPayload Amount of email credits to add or subtract from the current SubAccount email credits pool (positive or negative value)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailCreditsPatch(email, subaccountEmailCreditsPayload, options) {
            return localVarFp.subaccountsByEmailCreditsPatch(email, subaccountEmailCreditsPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes specified SubAccount. An email will be sent to confirm this change. Required Access Level: ModifySubAccounts
         * @summary Delete SubAccount
         * @param {string} email Email address of Sub-Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailDelete(email, options) {
            return localVarFp.subaccountsByEmailDelete(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns details for the specified SubAccount. Required Access Level: ViewSubAccounts
         * @summary Load SubAccount
         * @param {string} email Email address of Sub-Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailGet(email, options) {
            return localVarFp.subaccountsByEmailGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Update SubAccount email settings. Required Access Level: ModifySubAccounts
         * @summary Update SubAccount Email Settings
         * @param {string} email
         * @param {SubaccountEmailSettings} subaccountEmailSettings Updated Email Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsByEmailSettingsEmailPut(email, subaccountEmailSettings, options) {
            return localVarFp.subaccountsByEmailSettingsEmailPut(email, subaccountEmailSettings, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all your SubAccounts. Required Access Level: ViewSubAccounts
         * @summary Load SubAccounts
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsGet(limit, offset, options) {
            return localVarFp.subaccountsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new SubAccount to your Account. To receive an access token for this SubAccount, make a POST security/apikeys request using the \'subaccount\' parameter. Required Access Level: ModifySubAccounts
         * @summary Add SubAccount
         * @param {SubaccountPayload} subaccountPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subaccountsPost(subaccountPayload, options) {
            return localVarFp.subaccountsPost(subaccountPayload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SubAccountsApi - object-oriented interface
 * @export
 * @class SubAccountsApi
 * @extends {BaseAPI}
 */
class SubAccountsApi extends base_1.BaseAPI {
    /**
     * Update email credits of a subaccount by the given amount. Required Access Level: ModifySubAccounts
     * @summary Add, Subtract Email Credits
     * @param {string} email Email address of Sub-Account
     * @param {SubaccountEmailCreditsPayload} subaccountEmailCreditsPayload Amount of email credits to add or subtract from the current SubAccount email credits pool (positive or negative value)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    subaccountsByEmailCreditsPatch(email, subaccountEmailCreditsPayload, options) {
        return exports.SubAccountsApiFp(this.configuration).subaccountsByEmailCreditsPatch(email, subaccountEmailCreditsPayload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes specified SubAccount. An email will be sent to confirm this change. Required Access Level: ModifySubAccounts
     * @summary Delete SubAccount
     * @param {string} email Email address of Sub-Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    subaccountsByEmailDelete(email, options) {
        return exports.SubAccountsApiFp(this.configuration).subaccountsByEmailDelete(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns details for the specified SubAccount. Required Access Level: ViewSubAccounts
     * @summary Load SubAccount
     * @param {string} email Email address of Sub-Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    subaccountsByEmailGet(email, options) {
        return exports.SubAccountsApiFp(this.configuration).subaccountsByEmailGet(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update SubAccount email settings. Required Access Level: ModifySubAccounts
     * @summary Update SubAccount Email Settings
     * @param {string} email
     * @param {SubaccountEmailSettings} subaccountEmailSettings Updated Email Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    subaccountsByEmailSettingsEmailPut(email, subaccountEmailSettings, options) {
        return exports.SubAccountsApiFp(this.configuration).subaccountsByEmailSettingsEmailPut(email, subaccountEmailSettings, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all your SubAccounts. Required Access Level: ViewSubAccounts
     * @summary Load SubAccounts
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    subaccountsGet(limit, offset, options) {
        return exports.SubAccountsApiFp(this.configuration).subaccountsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a new SubAccount to your Account. To receive an access token for this SubAccount, make a POST security/apikeys request using the \'subaccount\' parameter. Required Access Level: ModifySubAccounts
     * @summary Add SubAccount
     * @param {SubaccountPayload} subaccountPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    subaccountsPost(subaccountPayload, options) {
        return exports.SubAccountsApiFp(this.configuration).subaccountsPost(subaccountPayload, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SubAccountsApi = SubAccountsApi;
