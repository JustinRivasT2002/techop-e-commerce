"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuppressionsApi = exports.SuppressionsApiFactory = exports.SuppressionsApiFp = exports.SuppressionsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SuppressionsApi - axios parameter creator
 * @export
 */
exports.SuppressionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Bounce List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesGet: (search, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/suppressions/bounces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces Async
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesImportPost: (file, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/suppressions/bounces/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces
         * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesPost: (requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'requestBody' is not null or undefined
            common_1.assertParamExists('suppressionsBouncesPost', 'requestBody', requestBody);
            const localVarPath = `/suppressions/bounces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Delete Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsByEmailDelete: (email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('suppressionsByEmailDelete', 'email', email);
            const localVarPath = `/suppressions/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsByEmailGet: (email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('suppressionsByEmailGet', 'email', email);
            const localVarPath = `/suppressions/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Complaints List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsGet: (search, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/suppressions/complaints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints Async
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsImportPost: (file, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/suppressions/complaints/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints
         * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsPost: (requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'requestBody' is not null or undefined
            common_1.assertParamExists('suppressionsComplaintsPost', 'requestBody', requestBody);
            const localVarPath = `/suppressions/complaints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppressions
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsGet: (limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/suppressions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Unsubscribes List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesGet: (search, limit, offset, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/suppressions/unsubscribes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes Async
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesImportPost: (file, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/suppressions/unsubscribes/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes
         * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesPost: (requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'requestBody' is not null or undefined
            common_1.assertParamExists('suppressionsUnsubscribesPost', 'requestBody', requestBody);
            const localVarPath = `/suppressions/unsubscribes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SuppressionsApi - functional programming interface
 * @export
 */
exports.SuppressionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.SuppressionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Bounce List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesGet(search, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsBouncesGet(search, limit, offset, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces Async
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesImportPost(file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsBouncesImportPost(file, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces
         * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesPost(requestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsBouncesPost(requestBody, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Delete Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsByEmailDelete(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsByEmailDelete(email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsByEmailGet(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsByEmailGet(email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Complaints List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsGet(search, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsComplaintsGet(search, limit, offset, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints Async
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsImportPost(file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsComplaintsImportPost(file, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints
         * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsPost(requestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsComplaintsPost(requestBody, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppressions
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsGet(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsGet(limit, offset, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Unsubscribes List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesGet(search, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsUnsubscribesGet(search, limit, offset, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes Async
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesImportPost(file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsUnsubscribesImportPost(file, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes
         * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesPost(requestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.suppressionsUnsubscribesPost(requestBody, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SuppressionsApi - factory interface
 * @export
 */
exports.SuppressionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.SuppressionsApiFp(configuration);
    return {
        /**
         * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Bounce List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesGet(search, limit, offset, options) {
            return localVarFp.suppressionsBouncesGet(search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces Async
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesImportPost(file, options) {
            return localVarFp.suppressionsBouncesImportPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Bounces
         * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsBouncesPost(requestBody, options) {
            return localVarFp.suppressionsBouncesPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Delete Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsByEmailDelete(email, options) {
            return localVarFp.suppressionsByEmailDelete(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppression
         * @param {string} email Proper email address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsByEmailGet(email, options) {
            return localVarFp.suppressionsByEmailGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Complaints List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsGet(search, limit, offset, options) {
            return localVarFp.suppressionsComplaintsGet(search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints Async
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsImportPost(file, options) {
            return localVarFp.suppressionsComplaintsImportPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Complaints
         * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsComplaintsPost(requestBody, options) {
            return localVarFp.suppressionsComplaintsPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Suppressions
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsGet(limit, offset, options) {
            return localVarFp.suppressionsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
         * @summary Get Unsubscribes List
         * @param {string} [search] Text fragment used for searching.
         * @param {number} [limit] Maximum number of returned items.
         * @param {number} [offset] How many items should be returned ahead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesGet(search, limit, offset, options) {
            return localVarFp.suppressionsUnsubscribesGet(search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes Async
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesImportPost(file, options) {
            return localVarFp.suppressionsUnsubscribesImportPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
         * @summary Add Unsubscribes
         * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suppressionsUnsubscribesPost(requestBody, options) {
            return localVarFp.suppressionsUnsubscribesPost(requestBody, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SuppressionsApi - object-oriented interface
 * @export
 * @class SuppressionsApi
 * @extends {BaseAPI}
 */
class SuppressionsApi extends base_1.BaseAPI {
    /**
     * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Bounce List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsBouncesGet(search, limit, offset, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsBouncesGet(search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsBouncesImportPost(file, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsBouncesImportPost(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Bounces
     * @param {Array<string>} requestBody Emails to add as bounces. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsBouncesPost(requestBody, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsBouncesPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Delete Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsByEmailDelete(email, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsByEmailDelete(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppression
     * @param {string} email Proper email address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsByEmailGet(email, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsByEmailGet(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Complaints List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsComplaintsGet(search, limit, offset, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsComplaintsGet(search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsComplaintsImportPost(file, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsComplaintsImportPost(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Complaints
     * @param {Array<string>} requestBody Emails to add as complaints. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsComplaintsPost(requestBody, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsComplaintsPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Suppressions
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsGet(limit, offset, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
     * @summary Get Unsubscribes List
     * @param {string} [search] Text fragment used for searching.
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsUnsubscribesGet(search, limit, offset, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsUnsubscribesGet(search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes Async
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsUnsubscribesImportPost(file, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsUnsubscribesImportPost(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @summary Add Unsubscribes
     * @param {Array<string>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuppressionsApi
     */
    suppressionsUnsubscribesPost(requestBody, options) {
        return exports.SuppressionsApiFp(this.configuration).suppressionsUnsubscribesPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SuppressionsApi = SuppressionsApi;
