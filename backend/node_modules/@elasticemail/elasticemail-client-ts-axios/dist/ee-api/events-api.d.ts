/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CompressionFormat } from '../ee-api-models';
import { EventType } from '../ee-api-models';
import { EventsOrderBy } from '../ee-api-models';
import { ExportFileFormats } from '../ee-api-models';
import { ExportLink } from '../ee-api-models';
import { ExportStatus } from '../ee-api-models';
import { RecipientEvent } from '../ee-api-models';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export declare const EventsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
     * @summary Load Email Events
     * @param {string} transactionid ID number of transaction
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsByTransactionidGet: (transactionid: string, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @summary Export Channel Events
     * @param {string} name Name of selected channel.
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsChannelsByNameExportPost: (name: string, eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @summary Load Channel Events
     * @param {string} name Name of selected channel.
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] How many items to load. Maximum for this request is 1000 items
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsChannelsByNameGet: (name: string, eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check the current status of the channel export. Required Access Level: Export
     * @summary Check Channel Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsChannelsExportByIdStatusGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check the current status of the export. Required Access Level: Export
     * @summary Check Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsExportByIdStatusGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @summary Export Events
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsExportPost: (eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @summary Load Events
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] How many items to load. Maximum for this request is 1000 items
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsGet: (eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventsApi - functional programming interface
 * @export
 */
export declare const EventsApiFp: (configuration?: Configuration) => {
    /**
     * Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
     * @summary Load Email Events
     * @param {string} transactionid ID number of transaction
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsByTransactionidGet(transactionid: string, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipientEvent>>>;
    /**
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @summary Export Channel Events
     * @param {string} name Name of selected channel.
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsChannelsByNameExportPost(name: string, eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportLink>>;
    /**
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @summary Load Channel Events
     * @param {string} name Name of selected channel.
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] How many items to load. Maximum for this request is 1000 items
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsChannelsByNameGet(name: string, eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipientEvent>>>;
    /**
     * Check the current status of the channel export. Required Access Level: Export
     * @summary Check Channel Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsChannelsExportByIdStatusGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportStatus>>;
    /**
     * Check the current status of the export. Required Access Level: Export
     * @summary Check Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsExportByIdStatusGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportStatus>>;
    /**
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @summary Export Events
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsExportPost(eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportLink>>;
    /**
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @summary Load Events
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] How many items to load. Maximum for this request is 1000 items
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsGet(eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipientEvent>>>;
};
/**
 * EventsApi - factory interface
 * @export
 */
export declare const EventsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
     * @summary Load Email Events
     * @param {string} transactionid ID number of transaction
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsByTransactionidGet(transactionid: string, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: any): AxiosPromise<Array<RecipientEvent>>;
    /**
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @summary Export Channel Events
     * @param {string} name Name of selected channel.
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsChannelsByNameExportPost(name: string, eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, options?: any): AxiosPromise<ExportLink>;
    /**
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @summary Load Channel Events
     * @param {string} name Name of selected channel.
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] How many items to load. Maximum for this request is 1000 items
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsChannelsByNameGet(name: string, eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: any): AxiosPromise<Array<RecipientEvent>>;
    /**
     * Check the current status of the channel export. Required Access Level: Export
     * @summary Check Channel Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsChannelsExportByIdStatusGet(id: string, options?: any): AxiosPromise<ExportStatus>;
    /**
     * Check the current status of the export. Required Access Level: Export
     * @summary Check Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsExportByIdStatusGet(id: string, options?: any): AxiosPromise<ExportStatus>;
    /**
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @summary Export Events
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsExportPost(eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, options?: any): AxiosPromise<ExportLink>;
    /**
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @summary Load Events
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] How many items to load. Maximum for this request is 1000 items
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventsGet(eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: any): AxiosPromise<Array<RecipientEvent>>;
};
/**
 * EventsApi - interface
 * @export
 * @interface EventsApi
 */
export interface EventsApiInterface {
    /**
     * Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
     * @summary Load Email Events
     * @param {string} transactionid ID number of transaction
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsByTransactionidGet(transactionid: string, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<RecipientEvent>>;
    /**
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @summary Export Channel Events
     * @param {string} name Name of selected channel.
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsChannelsByNameExportPost(name: string, eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, options?: AxiosRequestConfig): AxiosPromise<ExportLink>;
    /**
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @summary Load Channel Events
     * @param {string} name Name of selected channel.
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] How many items to load. Maximum for this request is 1000 items
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsChannelsByNameGet(name: string, eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<RecipientEvent>>;
    /**
     * Check the current status of the channel export. Required Access Level: Export
     * @summary Check Channel Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsChannelsExportByIdStatusGet(id: string, options?: AxiosRequestConfig): AxiosPromise<ExportStatus>;
    /**
     * Check the current status of the export. Required Access Level: Export
     * @summary Check Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsExportByIdStatusGet(id: string, options?: AxiosRequestConfig): AxiosPromise<ExportStatus>;
    /**
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @summary Export Events
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsExportPost(eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, options?: AxiosRequestConfig): AxiosPromise<ExportLink>;
    /**
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @summary Load Events
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] How many items to load. Maximum for this request is 1000 items
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsGet(eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<RecipientEvent>>;
}
/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export declare class EventsApi extends BaseAPI implements EventsApiInterface {
    /**
     * Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
     * @summary Load Email Events
     * @param {string} transactionid ID number of transaction
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsByTransactionidGet(transactionid: string, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RecipientEvent[]>>;
    /**
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @summary Export Channel Events
     * @param {string} name Name of selected channel.
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsChannelsByNameExportPost(name: string, eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportLink>>;
    /**
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @summary Load Channel Events
     * @param {string} name Name of selected channel.
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] How many items to load. Maximum for this request is 1000 items
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsChannelsByNameGet(name: string, eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RecipientEvent[]>>;
    /**
     * Check the current status of the channel export. Required Access Level: Export
     * @summary Check Channel Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsChannelsExportByIdStatusGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<"Error" | "Loading" | "Ready" | "Expired">>;
    /**
     * Check the current status of the export. Required Access Level: Export
     * @summary Check Export Status
     * @param {string} id ID of the exported file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsExportByIdStatusGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<"Error" | "Loading" | "Ready" | "Expired">>;
    /**
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @summary Export Events
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {ExportFileFormats} [fileFormat] Format of the exported file
     * @param {CompressionFormat} [compressionFormat] FileResponse compression format. None or Zip.
     * @param {string} [fileName] Name of your file including extension.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsExportPost(eventTypes?: Array<EventType>, from?: string, to?: string, fileFormat?: ExportFileFormats, compressionFormat?: CompressionFormat, fileName?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportLink>>;
    /**
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @summary Load Events
     * @param {Array<EventType>} [eventTypes] Types of Events to return
     * @param {string} [from] Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {string} [to] Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {EventsOrderBy} [orderBy]
     * @param {number} [limit] How many items to load. Maximum for this request is 1000 items
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    eventsGet(eventTypes?: Array<EventType>, from?: string, to?: string, orderBy?: EventsOrderBy, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RecipientEvent[]>>;
}
