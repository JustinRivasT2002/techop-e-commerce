"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailsApi = exports.EmailsApiFactory = exports.EmailsApiFp = exports.EmailsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * EmailsApi - axios parameter creator
 * @export
 */
exports.EmailsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns email details for viewing or rendering. Required Access Level: None
         * @summary View Email
         * @param {string} msgid Message identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsByMsgidViewGet: (msgid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'msgid' is not null or undefined
            common_1.assertParamExists('emailsByMsgidViewGet', 'msgid', msgid);
            const localVarPath = `/emails/{msgid}/view`
                .replace(`{${"msgid"}}`, encodeURIComponent(String(msgid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails CSV
         * @param {MergeEmailPayload} mergeEmailPayload Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsMergefilePost: (mergeEmailPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'mergeEmailPayload' is not null or undefined
            common_1.assertParamExists('emailsMergefilePost', 'mergeEmailPayload', mergeEmailPayload);
            const localVarPath = `/emails/mergefile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(mergeEmailPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails
         * @param {EmailMessageData} emailMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsPost: (emailMessageData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'emailMessageData' is not null or undefined
            common_1.assertParamExists('emailsPost', 'emailMessageData', emailMessageData);
            const localVarPath = `/emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(emailMessageData, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
         * @summary Send Transactional Email
         * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsTransactionalPost: (emailTransactionalMessageData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'emailTransactionalMessageData' is not null or undefined
            common_1.assertParamExists('emailsTransactionalPost', 'emailTransactionalMessageData', emailTransactionalMessageData);
            const localVarPath = `/emails/transactional`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(emailTransactionalMessageData, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EmailsApi - functional programming interface
 * @export
 */
exports.EmailsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.EmailsApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns email details for viewing or rendering. Required Access Level: None
         * @summary View Email
         * @param {string} msgid Message identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsByMsgidViewGet(msgid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.emailsByMsgidViewGet(msgid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails CSV
         * @param {MergeEmailPayload} mergeEmailPayload Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsMergefilePost(mergeEmailPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.emailsMergefilePost(mergeEmailPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails
         * @param {EmailMessageData} emailMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsPost(emailMessageData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.emailsPost(emailMessageData, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
         * @summary Send Transactional Email
         * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsTransactionalPost(emailTransactionalMessageData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.emailsTransactionalPost(emailTransactionalMessageData, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * EmailsApi - factory interface
 * @export
 */
exports.EmailsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.EmailsApiFp(configuration);
    return {
        /**
         * Returns email details for viewing or rendering. Required Access Level: None
         * @summary View Email
         * @param {string} msgid Message identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsByMsgidViewGet(msgid, options) {
            return localVarFp.emailsByMsgidViewGet(msgid, options).then((request) => request(axios, basePath));
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails CSV
         * @param {MergeEmailPayload} mergeEmailPayload Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsMergefilePost(mergeEmailPayload, options) {
            return localVarFp.emailsMergefilePost(mergeEmailPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Send bulk merge email. Required Access Level: SendHttp
         * @summary Send Bulk Emails
         * @param {EmailMessageData} emailMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsPost(emailMessageData, options) {
            return localVarFp.emailsPost(emailMessageData, options).then((request) => request(axios, basePath));
        },
        /**
         * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
         * @summary Send Transactional Email
         * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailsTransactionalPost(emailTransactionalMessageData, options) {
            return localVarFp.emailsTransactionalPost(emailTransactionalMessageData, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EmailsApi - object-oriented interface
 * @export
 * @class EmailsApi
 * @extends {BaseAPI}
 */
class EmailsApi extends base_1.BaseAPI {
    /**
     * Returns email details for viewing or rendering. Required Access Level: None
     * @summary View Email
     * @param {string} msgid Message identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    emailsByMsgidViewGet(msgid, options) {
        return exports.EmailsApiFp(this.configuration).emailsByMsgidViewGet(msgid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send bulk merge email. Required Access Level: SendHttp
     * @summary Send Bulk Emails CSV
     * @param {MergeEmailPayload} mergeEmailPayload Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    emailsMergefilePost(mergeEmailPayload, options) {
        return exports.EmailsApiFp(this.configuration).emailsMergefilePost(mergeEmailPayload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send bulk merge email. Required Access Level: SendHttp
     * @summary Send Bulk Emails
     * @param {EmailMessageData} emailMessageData Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    emailsPost(emailMessageData, options) {
        return exports.EmailsApiFp(this.configuration).emailsPost(emailMessageData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send transactional emails (recipients will be known to each other). Required Access Level: SendHttp
     * @summary Send Transactional Email
     * @param {EmailTransactionalMessageData} emailTransactionalMessageData Email data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    emailsTransactionalPost(emailTransactionalMessageData, options) {
        return exports.EmailsApiFp(this.configuration).emailsTransactionalPost(emailTransactionalMessageData, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EmailsApi = EmailsApi;
