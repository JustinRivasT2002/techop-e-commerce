/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { Segment } from '../ee-api-models';
import { SegmentPayload } from '../ee-api-models';
/**
 * SegmentsApi - axios parameter creator
 * @export
 */
export declare const SegmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete an existing segment. Required Access Level: ModifyContacts
     * @summary Delete Segment
     * @param {string} name Name of your segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsByNameDelete: (name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns details for the specified segment. Required Access Level: ViewContacts
     * @summary Load Segment
     * @param {string} name Name of the segment you want to load. Will load all contacts if the \&#39;All Contacts\&#39; name has been provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsByNameGet: (name: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Rename or change RULE for your segment. Required Access Level: ModifyContacts
     * @summary Update Segment
     * @param {string} name Name of your segment.
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsByNamePut: (name: string, segmentPayload: SegmentPayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all your available Segments. Required Access Level: ViewContacts
     * @summary Load Segments
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsGet: (limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add a new segment, based on specified RULE. Required Access Level: ModifyContacts
     * @summary Add Segment
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsPost: (segmentPayload: SegmentPayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SegmentsApi - functional programming interface
 * @export
 */
export declare const SegmentsApiFp: (configuration?: Configuration) => {
    /**
     * Delete an existing segment. Required Access Level: ModifyContacts
     * @summary Delete Segment
     * @param {string} name Name of your segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsByNameDelete(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns details for the specified segment. Required Access Level: ViewContacts
     * @summary Load Segment
     * @param {string} name Name of the segment you want to load. Will load all contacts if the \&#39;All Contacts\&#39; name has been provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsByNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>>;
    /**
     * Rename or change RULE for your segment. Required Access Level: ModifyContacts
     * @summary Update Segment
     * @param {string} name Name of your segment.
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsByNamePut(name: string, segmentPayload: SegmentPayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>>;
    /**
     * Returns a list of all your available Segments. Required Access Level: ViewContacts
     * @summary Load Segments
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Segment>>>;
    /**
     * Add a new segment, based on specified RULE. Required Access Level: ModifyContacts
     * @summary Add Segment
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsPost(segmentPayload: SegmentPayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>>;
};
/**
 * SegmentsApi - factory interface
 * @export
 */
export declare const SegmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete an existing segment. Required Access Level: ModifyContacts
     * @summary Delete Segment
     * @param {string} name Name of your segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsByNameDelete(name: string, options?: any): AxiosPromise<void>;
    /**
     * Returns details for the specified segment. Required Access Level: ViewContacts
     * @summary Load Segment
     * @param {string} name Name of the segment you want to load. Will load all contacts if the \&#39;All Contacts\&#39; name has been provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsByNameGet(name: string, options?: any): AxiosPromise<Segment>;
    /**
     * Rename or change RULE for your segment. Required Access Level: ModifyContacts
     * @summary Update Segment
     * @param {string} name Name of your segment.
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsByNamePut(name: string, segmentPayload: SegmentPayload, options?: any): AxiosPromise<Segment>;
    /**
     * Returns a list of all your available Segments. Required Access Level: ViewContacts
     * @summary Load Segments
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsGet(limit?: number, offset?: number, options?: any): AxiosPromise<Array<Segment>>;
    /**
     * Add a new segment, based on specified RULE. Required Access Level: ModifyContacts
     * @summary Add Segment
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    segmentsPost(segmentPayload: SegmentPayload, options?: any): AxiosPromise<Segment>;
};
/**
 * SegmentsApi - interface
 * @export
 * @interface SegmentsApi
 */
export interface SegmentsApiInterface {
    /**
     * Delete an existing segment. Required Access Level: ModifyContacts
     * @summary Delete Segment
     * @param {string} name Name of your segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiInterface
     */
    segmentsByNameDelete(name: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns details for the specified segment. Required Access Level: ViewContacts
     * @summary Load Segment
     * @param {string} name Name of the segment you want to load. Will load all contacts if the \&#39;All Contacts\&#39; name has been provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiInterface
     */
    segmentsByNameGet(name: string, options?: AxiosRequestConfig): AxiosPromise<Segment>;
    /**
     * Rename or change RULE for your segment. Required Access Level: ModifyContacts
     * @summary Update Segment
     * @param {string} name Name of your segment.
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiInterface
     */
    segmentsByNamePut(name: string, segmentPayload: SegmentPayload, options?: AxiosRequestConfig): AxiosPromise<Segment>;
    /**
     * Returns a list of all your available Segments. Required Access Level: ViewContacts
     * @summary Load Segments
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiInterface
     */
    segmentsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<Array<Segment>>;
    /**
     * Add a new segment, based on specified RULE. Required Access Level: ModifyContacts
     * @summary Add Segment
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiInterface
     */
    segmentsPost(segmentPayload: SegmentPayload, options?: AxiosRequestConfig): AxiosPromise<Segment>;
}
/**
 * SegmentsApi - object-oriented interface
 * @export
 * @class SegmentsApi
 * @extends {BaseAPI}
 */
export declare class SegmentsApi extends BaseAPI implements SegmentsApiInterface {
    /**
     * Delete an existing segment. Required Access Level: ModifyContacts
     * @summary Delete Segment
     * @param {string} name Name of your segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    segmentsByNameDelete(name: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Returns details for the specified segment. Required Access Level: ViewContacts
     * @summary Load Segment
     * @param {string} name Name of the segment you want to load. Will load all contacts if the \&#39;All Contacts\&#39; name has been provided
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    segmentsByNameGet(name: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Segment>>;
    /**
     * Rename or change RULE for your segment. Required Access Level: ModifyContacts
     * @summary Update Segment
     * @param {string} name Name of your segment.
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    segmentsByNamePut(name: string, segmentPayload: SegmentPayload, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Segment>>;
    /**
     * Returns a list of all your available Segments. Required Access Level: ViewContacts
     * @summary Load Segments
     * @param {number} [limit] Maximum number of returned items.
     * @param {number} [offset] How many items should be returned ahead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    segmentsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Segment[]>>;
    /**
     * Add a new segment, based on specified RULE. Required Access Level: ModifyContacts
     * @summary Add Segment
     * @param {SegmentPayload} segmentPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    segmentsPost(segmentPayload: SegmentPayload, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Segment>>;
}
