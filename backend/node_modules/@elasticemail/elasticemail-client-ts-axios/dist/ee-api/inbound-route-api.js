"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InboundRouteApi = exports.InboundRouteApiFactory = exports.InboundRouteApiFp = exports.InboundRouteApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * InboundRouteApi - axios parameter creator
 * @export
 */
exports.InboundRouteApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Deletes the Inbound Route. Required Access Level: ModifySettings
         * @summary Delete Route
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteByIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('inboundrouteByIdDelete', 'id', id);
            const localVarPath = `/inboundroute/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Load an Inbound Route. Required Access Level: ViewSettings
         * @summary Get Route
         * @param {string} id ID number of your attachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteByIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('inboundrouteByIdGet', 'id', id);
            const localVarPath = `/inboundroute/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the Inbound Route. Required Access Level: ModifySettings
         * @summary Update Route
         * @param {string} id
         * @param {InboundPayload} inboundPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteByIdPut: (id, inboundPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('inboundrouteByIdPut', 'id', id);
            // verify required parameter 'inboundPayload' is not null or undefined
            common_1.assertParamExists('inboundrouteByIdPut', 'inboundPayload', inboundPayload);
            const localVarPath = `/inboundroute/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(inboundPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all your Inbound Routes. Required Access Level: ViewSettings
         * @summary Get Routes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/inboundroute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Required Access Level: ViewSettings
         * @summary Update Sorting
         * @param {Array<SortOrderItem>} sortOrderItem Change the ordering of inbound routes for when matching the inbound
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteOrderPut: (sortOrderItem, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sortOrderItem' is not null or undefined
            common_1.assertParamExists('inboundrouteOrderPut', 'sortOrderItem', sortOrderItem);
            const localVarPath = `/inboundroute/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sortOrderItem, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create new Inbound Route. Required Access Level: ModifySettings
         * @summary Create Route
         * @param {InboundPayload} inboundPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundroutePost: (inboundPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'inboundPayload' is not null or undefined
            common_1.assertParamExists('inboundroutePost', 'inboundPayload', inboundPayload);
            const localVarPath = `/inboundroute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apikey required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "X-ElasticEmail-ApiKey", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(inboundPayload, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * InboundRouteApi - functional programming interface
 * @export
 */
exports.InboundRouteApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.InboundRouteApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes the Inbound Route. Required Access Level: ModifySettings
         * @summary Delete Route
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteByIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.inboundrouteByIdDelete(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Load an Inbound Route. Required Access Level: ViewSettings
         * @summary Get Route
         * @param {string} id ID number of your attachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteByIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.inboundrouteByIdGet(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update the Inbound Route. Required Access Level: ModifySettings
         * @summary Update Route
         * @param {string} id
         * @param {InboundPayload} inboundPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteByIdPut(id, inboundPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.inboundrouteByIdPut(id, inboundPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get all your Inbound Routes. Required Access Level: ViewSettings
         * @summary Get Routes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.inboundrouteGet(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Required Access Level: ViewSettings
         * @summary Update Sorting
         * @param {Array<SortOrderItem>} sortOrderItem Change the ordering of inbound routes for when matching the inbound
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteOrderPut(sortOrderItem, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.inboundrouteOrderPut(sortOrderItem, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create new Inbound Route. Required Access Level: ModifySettings
         * @summary Create Route
         * @param {InboundPayload} inboundPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundroutePost(inboundPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.inboundroutePost(inboundPayload, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * InboundRouteApi - factory interface
 * @export
 */
exports.InboundRouteApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.InboundRouteApiFp(configuration);
    return {
        /**
         * Deletes the Inbound Route. Required Access Level: ModifySettings
         * @summary Delete Route
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteByIdDelete(id, options) {
            return localVarFp.inboundrouteByIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Load an Inbound Route. Required Access Level: ViewSettings
         * @summary Get Route
         * @param {string} id ID number of your attachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteByIdGet(id, options) {
            return localVarFp.inboundrouteByIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the Inbound Route. Required Access Level: ModifySettings
         * @summary Update Route
         * @param {string} id
         * @param {InboundPayload} inboundPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteByIdPut(id, inboundPayload, options) {
            return localVarFp.inboundrouteByIdPut(id, inboundPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all your Inbound Routes. Required Access Level: ViewSettings
         * @summary Get Routes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteGet(options) {
            return localVarFp.inboundrouteGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Required Access Level: ViewSettings
         * @summary Update Sorting
         * @param {Array<SortOrderItem>} sortOrderItem Change the ordering of inbound routes for when matching the inbound
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundrouteOrderPut(sortOrderItem, options) {
            return localVarFp.inboundrouteOrderPut(sortOrderItem, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new Inbound Route. Required Access Level: ModifySettings
         * @summary Create Route
         * @param {InboundPayload} inboundPayload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inboundroutePost(inboundPayload, options) {
            return localVarFp.inboundroutePost(inboundPayload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * InboundRouteApi - object-oriented interface
 * @export
 * @class InboundRouteApi
 * @extends {BaseAPI}
 */
class InboundRouteApi extends base_1.BaseAPI {
    /**
     * Deletes the Inbound Route. Required Access Level: ModifySettings
     * @summary Delete Route
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundrouteByIdDelete(id, options) {
        return exports.InboundRouteApiFp(this.configuration).inboundrouteByIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Load an Inbound Route. Required Access Level: ViewSettings
     * @summary Get Route
     * @param {string} id ID number of your attachment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundrouteByIdGet(id, options) {
        return exports.InboundRouteApiFp(this.configuration).inboundrouteByIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the Inbound Route. Required Access Level: ModifySettings
     * @summary Update Route
     * @param {string} id
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundrouteByIdPut(id, inboundPayload, options) {
        return exports.InboundRouteApiFp(this.configuration).inboundrouteByIdPut(id, inboundPayload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all your Inbound Routes. Required Access Level: ViewSettings
     * @summary Get Routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundrouteGet(options) {
        return exports.InboundRouteApiFp(this.configuration).inboundrouteGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Required Access Level: ViewSettings
     * @summary Update Sorting
     * @param {Array<SortOrderItem>} sortOrderItem Change the ordering of inbound routes for when matching the inbound
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundrouteOrderPut(sortOrderItem, options) {
        return exports.InboundRouteApiFp(this.configuration).inboundrouteOrderPut(sortOrderItem, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create new Inbound Route. Required Access Level: ModifySettings
     * @summary Create Route
     * @param {InboundPayload} inboundPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRouteApi
     */
    inboundroutePost(inboundPayload, options) {
        return exports.InboundRouteApiFp(this.configuration).inboundroutePost(inboundPayload, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.InboundRouteApi = InboundRouteApi;
