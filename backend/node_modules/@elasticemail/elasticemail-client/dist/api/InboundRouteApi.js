"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _InboundPayload = _interopRequireDefault(require("../model/InboundPayload"));
var _InboundRoute = _interopRequireDefault(require("../model/InboundRoute"));
var _SortOrderItem = _interopRequireDefault(require("../model/SortOrderItem"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* InboundRoute service.
* @module api/InboundRouteApi
* @version 4.0.26
*/
var InboundRouteApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new InboundRouteApi. 
  * @alias module:api/InboundRouteApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function InboundRouteApi(apiClient) {
    _classCallCheck(this, InboundRouteApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the inboundrouteByIdDelete operation.
   * @callback module:api/InboundRouteApi~inboundrouteByIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete Route
   * Deletes the Inbound Route. Required Access Level: ModifySettings
   * @param {String} id 
   * @param {module:api/InboundRouteApi~inboundrouteByIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   */
  return _createClass(InboundRouteApi, [{
    key: "inboundrouteByIdDelete",
    value: function inboundrouteByIdDelete(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling inboundrouteByIdDelete");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/inboundroute/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the inboundrouteByIdGet operation.
     * @callback module:api/InboundRouteApi~inboundrouteByIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundRoute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Route
     * Load an Inbound Route. Required Access Level: ViewSettings
     * @param {String} id ID number of your attachment
     * @param {module:api/InboundRouteApi~inboundrouteByIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundRoute}
     */
  }, {
    key: "inboundrouteByIdGet",
    value: function inboundrouteByIdGet(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling inboundrouteByIdGet");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _InboundRoute["default"];
      return this.apiClient.callApi('/inboundroute/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the inboundrouteByIdPut operation.
     * @callback module:api/InboundRouteApi~inboundrouteByIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundRoute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Route
     * Update the Inbound Route. Required Access Level: ModifySettings
     * @param {String} id 
     * @param {module:model/InboundPayload} inboundPayload 
     * @param {module:api/InboundRouteApi~inboundrouteByIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundRoute}
     */
  }, {
    key: "inboundrouteByIdPut",
    value: function inboundrouteByIdPut(id, inboundPayload, callback) {
      var postBody = inboundPayload;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling inboundrouteByIdPut");
      }
      // verify the required parameter 'inboundPayload' is set
      if (inboundPayload === undefined || inboundPayload === null) {
        throw new Error("Missing the required parameter 'inboundPayload' when calling inboundrouteByIdPut");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _InboundRoute["default"];
      return this.apiClient.callApi('/inboundroute/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the inboundrouteGet operation.
     * @callback module:api/InboundRouteApi~inboundrouteGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboundRoute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Routes
     * Get all your Inbound Routes. Required Access Level: ViewSettings
     * @param {module:api/InboundRouteApi~inboundrouteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboundRoute>}
     */
  }, {
    key: "inboundrouteGet",
    value: function inboundrouteGet(callback) {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_InboundRoute["default"]];
      return this.apiClient.callApi('/inboundroute', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the inboundrouteOrderPut operation.
     * @callback module:api/InboundRouteApi~inboundrouteOrderPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboundRoute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Sorting
     * Required Access Level: ViewSettings
     * @param {Array.<module:model/SortOrderItem>} sortOrderItem Change the ordering of inbound routes for when matching the inbound
     * @param {module:api/InboundRouteApi~inboundrouteOrderPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboundRoute>}
     */
  }, {
    key: "inboundrouteOrderPut",
    value: function inboundrouteOrderPut(sortOrderItem, callback) {
      var postBody = sortOrderItem;
      // verify the required parameter 'sortOrderItem' is set
      if (sortOrderItem === undefined || sortOrderItem === null) {
        throw new Error("Missing the required parameter 'sortOrderItem' when calling inboundrouteOrderPut");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [_InboundRoute["default"]];
      return this.apiClient.callApi('/inboundroute/order', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the inboundroutePost operation.
     * @callback module:api/InboundRouteApi~inboundroutePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundRoute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Route
     * Create new Inbound Route. Required Access Level: ModifySettings
     * @param {module:model/InboundPayload} inboundPayload 
     * @param {module:api/InboundRouteApi~inboundroutePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundRoute}
     */
  }, {
    key: "inboundroutePost",
    value: function inboundroutePost(inboundPayload, callback) {
      var postBody = inboundPayload;
      // verify the required parameter 'inboundPayload' is set
      if (inboundPayload === undefined || inboundPayload === null) {
        throw new Error("Missing the required parameter 'inboundPayload' when calling inboundroutePost");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _InboundRoute["default"];
      return this.apiClient.callApi('/inboundroute', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
}();